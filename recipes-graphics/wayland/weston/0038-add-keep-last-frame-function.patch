diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index 4140c7d..17bd196 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -1584,7 +1584,7 @@ struct weston_surface {
 	int queue_size;
 	int queue_capacity;
 	void* commit_queue;
-
+	bool keep_last_frame;
 };
 
 struct weston_subsurface {
diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 99c526a..aee1d94 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -361,6 +361,7 @@ struct drm_fb {
 
 	/* Used by dumb fbs */
 	void *map;
+	struct drm_plane *plane;
 };
 
 struct drm_buffer_fb {
@@ -491,6 +492,8 @@ struct drm_plane {
 
 	bool is_video_plane;
 	int video_plane;
+	bool keep_last_frame;
+	uint32_t last_fb_id;
 
 	struct weston_drm_format_array formats;
 };
diff --git a/libweston/backend-drm/fb.c b/libweston/backend-drm/fb.c
index 3478d8d..7bec834 100644
--- a/libweston/backend-drm/fb.c
+++ b/libweston/backend-drm/fb.c
@@ -43,11 +43,19 @@
 #include "drm-internal.h"
 #include "linux-dmabuf.h"
 
+#include <linux/amlogic/drm/meson_drm.h>
+
 static void
 drm_fb_destroy(struct drm_fb *fb)
 {
-	if (fb->fb_id != 0)
-		drmModeRmFB(fb->fd, fb->fb_id);
+	if (fb->fb_id != 0) {
+		if (fb && fb->plane && fb->plane->keep_last_frame && (fb->fb_id == fb->plane->last_fb_id)) {
+			weston_log("\n drm_fb_destroy keep last frame:%d \n", fb->fb_id);
+			drmIoctl(fb->fd, DRM_IOCTL_MESON_RMFB, &fb->fb_id);
+		} else {
+			drmModeRmFB(fb->fd, fb->fb_id);
+		}
+	}
 	free(fb);
 }
 
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 6c2a988..f2b3f21 100755
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -996,6 +996,11 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_FB_ID,
 				      plane_state->fb ? plane_state->fb->fb_id : 0);
+		if ( plane_state->plane->keep_last_frame) {
+			 plane_state->plane->last_fb_id = plane_state->fb->fb_id;
+			drm_debug(plane->backend, "\t\t\t need keep last frame .update last fb_id:%u\n",
+				(unsigned long) plane_state->fb->fb_id);
+		}
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_CRTC_ID,
 				      plane_state->fb ? crtc->crtc_id : 0);
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_SRC_X,
diff --git a/libweston/backend-drm/state-propose.c b/libweston/backend-drm/state-propose.c
index 84c185c..9ace4cf 100644
--- a/libweston/backend-drm/state-propose.c
+++ b/libweston/backend-drm/state-propose.c
@@ -841,6 +841,14 @@ drm_output_prepare_plane_view(struct drm_output_state *state,
 		drm_output_destroy_zpos_plane(p_zpos);
 
 	drm_fb_unref(fb);
+
+	if (ev->surface->is_video_surface &&
+		ev->surface->keep_last_frame && fb && ps) {
+		fb->plane = ps->plane;
+		fb->plane->keep_last_frame = true;
+		drm_debug(b,"\n \t\t\t\t[view] video surface: %d keep_last_frame %d view:%p surface: %p plane:%d\n", 
+	ev->surface->is_video_surface, ev->surface->keep_last_frame , fb, ev->surface, ps->plane->plane_id);
+	}
 	return ps;
 }
 
diff --git a/libweston/compositor.c b/libweston/compositor.c
index e726601..20db0a7 100755
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -710,6 +710,7 @@ weston_surface_create(struct weston_compositor *compositor)
 	surface->queue_capacity = SURFACE_QUEUE_CAPACITY;
 	surface->queue_size = 0;
 	wl_list_init(&surface->link);
+	surface->keep_last_frame = false;
 	weston_log("\n weston_surface_create :%p\n",surface );
 
 	return surface;
@@ -2354,7 +2355,6 @@ WL_EXPORT void
 weston_view_destroy(struct weston_view *view)
 {
 	struct weston_paint_node *pnode, *pntmp;
-
 	weston_signal_emit_mutable(&view->destroy_signal, view);
 
 	assert(wl_list_empty(&view->geometry.child_list));
@@ -4058,6 +4058,20 @@ surface_set_video_plane(struct wl_client *client,
 		return;
 	surface->video_plane = video_plane;
 }
+
+static void
+surface_keep_last_frame(struct wl_client *client,
+	       struct wl_resource *resource,
+	       int32_t keep_last_frame)
+{
+	struct weston_surface *surface = wl_resource_get_user_data(resource);
+	if ( keep_last_frame < 0 )
+		return;
+	surface->keep_last_frame = true;
+	if ( keep_last_frame == 0 )
+		surface->keep_last_frame = false;
+	weston_log("\n surface_keep_last_frame:%d \n", surface->keep_last_frame);
+}
 
 static void
 surface_damage_buffer(struct wl_client *client,
@@ -4663,7 +4677,8 @@ static const struct wl_surface_interface surface_interface = {
 	surface_set_buffer_scale,
 	surface_damage_buffer,
 	surface_set_video_plane,
-	surface_set_pts
+	surface_set_pts,
+	surface_keep_last_frame
 };
 
 static int
