diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index 4b72f76..4d0a8fa 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -1185,6 +1185,7 @@ struct weston_compositor {
 	struct weston_log_scope *timeline;
 
 	struct content_protection *content_protection;
+	struct weston_surface* last_keyboard_focus;
 };
 
 struct weston_buffer {
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 260d1f8..5292921 100755
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -7751,9 +7751,9 @@ debug_scene_view_print(FILE *fp, struct weston_view *view, int view_idx)
 	    view->surface->get_label(view->surface, desc, sizeof(desc)) < 0) {
 		strcpy(desc, "[no description available]");
 	}
-	fprintf(fp, "\tView %d (role %s, PID %d, surface ID %u, %s, %p):\n",
+	fprintf(fp, "\tView %d (role %s, PID %d, surface ID %u, %s, %p %p):\n",
 		view_idx, view->surface->role_name, pid, surface_id,
-		desc, view);
+		desc, view, view->surface);
 
 	box = pixman_region32_extents(&view->transform.boundingbox);
 	fprintf(fp, "\t\tposition: (%d, %d) -> (%d, %d)\n",
@@ -8097,6 +8097,7 @@ weston_compositor_create(struct wl_display *display,
 						weston_timeline_create_subscription,
 						weston_timeline_destroy_subscription,
 						ec);
+	ec->last_keyboard_focus = NULL;
 	return ec;
 
 fail:
diff --git a/libweston/input.c b/libweston/input.c
index 6fb4bed..061eb13 100644
--- a/libweston/input.c
+++ b/libweston/input.c
@@ -1525,6 +1525,18 @@ send_enter_to_resource_list(struct wl_list *list,
 	}
 }
 
+static bool weston_keyboard_need_enter_surface( struct weston_keyboard *keyboard, 
+                        struct weston_surface *surface)
+{
+	bool enter = false;
+	if (find_resource_for_surface(&keyboard->resource_list, surface) &&
+			keyboard->focus != surface ) {
+		enter = true;
+	}
+	weston_log("\n %s %d, enter surface:%p, enter:%d\n", __FUNCTION__,__LINE__, surface, enter);
+	return enter;
+}
+
 WL_EXPORT void
 weston_keyboard_set_focus(struct weston_keyboard *keyboard,
 			  struct weston_surface *surface)
@@ -1545,48 +1557,57 @@ weston_keyboard_set_focus(struct weston_keyboard *keyboard,
 
 	focus_resource_list = &keyboard->focus_resource_list;
 
-	if (!wl_list_empty(focus_resource_list) && keyboard->focus != surface) {
-		serial = wl_display_next_serial(display);
-		wl_resource_for_each(resource, focus_resource_list) {
-			wl_keyboard_send_leave(resource, serial,
-					keyboard->focus->resource);
+	if (weston_keyboard_need_enter_surface( keyboard, surface ) || surface == NULL) {
+		if (!wl_list_empty(focus_resource_list) && keyboard->focus != surface) {
+			serial = wl_display_next_serial(display);
+				wl_resource_for_each(resource, focus_resource_list) {
+					if (surface && keyboard && keyboard->focus)
+					    surface->compositor->last_keyboard_focus = keyboard->focus;
+				    weston_log("\n %s %d, leave surface:%p\n", __FUNCTION__,__LINE__, keyboard->focus);
+					wl_keyboard_send_leave(resource, serial,
+							keyboard->focus->resource);
+				}
+			move_resources(&keyboard->resource_list, focus_resource_list);
+		}
+		if ( surface == NULL ) {
+			surface = keyboard->focus->compositor->last_keyboard_focus;
+			weston_log("\n %s %d, need	back to  surface:%p\n", __FUNCTION__,__LINE__, surface);
 		}
-		move_resources(&keyboard->resource_list, focus_resource_list);
-	}
 
-	if (find_resource_for_surface(&keyboard->resource_list, surface) &&
-	    keyboard->focus != surface) {
-		struct wl_client *surface_client =
-			wl_resource_get_client(surface->resource);
+		if (find_resource_for_surface(&keyboard->resource_list, surface) &&
+		    keyboard->focus != surface) {
+			struct wl_client *surface_client =
+				wl_resource_get_client(surface->resource);
 
-		serial = wl_display_next_serial(display);
+			serial = wl_display_next_serial(display);
 
-		move_resources_for_client(focus_resource_list,
-					  &keyboard->resource_list,
-					  surface_client);
-		send_enter_to_resource_list(focus_resource_list,
-					    keyboard,
-					    surface,
-					    serial);
-		keyboard->focus_serial = serial;
-	}
-
-	/* Since this function gets called from the surface destroy handler
-	 * we can't just remove the kbd focus listener, or we might corrupt
-	 * the list it's in.
-	 * Instead, we'll just set a flag to ignore the focus when the
-	 * compositor regains kbd focus.
-	 */
-	seat->use_saved_kbd_focus = false;
+			move_resources_for_client(focus_resource_list,
+						  &keyboard->resource_list,
+						  surface_client);
+			send_enter_to_resource_list(focus_resource_list,
+						    keyboard,
+						    surface,
+						    serial);
+			keyboard->focus_serial = serial;
+		}
 
-	wl_list_remove(&keyboard->focus_resource_listener.link);
-	wl_list_init(&keyboard->focus_resource_listener.link);
-	if (surface)
-		wl_resource_add_destroy_listener(surface->resource,
-						 &keyboard->focus_resource_listener);
+		/* Since this function gets called from the surface destroy handler
+		 * we can't just remove the kbd focus listener, or we might corrupt
+		 * the list it's in.
+		 * Instead, we'll just set a flag to ignore the focus when the
+		 * compositor regains kbd focus.
+		 */
+		seat->use_saved_kbd_focus = false;
 
-	keyboard->focus = surface;
-	wl_signal_emit(&keyboard->focus_signal, keyboard);
+		wl_list_remove(&keyboard->focus_resource_listener.link);
+		wl_list_init(&keyboard->focus_resource_listener.link);
+		if (surface)
+			wl_resource_add_destroy_listener(surface->resource,
+							 &keyboard->focus_resource_listener);
+
+		keyboard->focus = surface;
+		wl_signal_emit(&keyboard->focus_signal, keyboard);
+	}
 }
 
 /* Users of this function must manually manage the keyboard focus */
