diff --git a/include/libweston/libweston.h b/include/libweston/libweston.h
index a0972a4..98f1b8e 100644
--- a/include/libweston/libweston.h
+++ b/include/libweston/libweston.h
@@ -1186,6 +1186,7 @@ struct weston_compositor {
 
 	struct content_protection *content_protection;
 	struct weston_surface* last_keyboard_focus;
+	int video_surface_count;
 };
 
 struct weston_buffer {
@@ -1562,6 +1563,9 @@ struct weston_surface {
 	 *  2. is YUV format. (for amlogic video plane it below primary plane (zpos can't effect for this situation)
 	 */
 	bool is_video_surface;
+	//	client will assign video path for current video surface 
+	int video_plane;
+
 #endif
 };

diff --git a/libweston/backend-drm/drm-internal.h b/libweston/backend-drm/drm-internal.h
index 5c3ead8..752c491 100644
--- a/libweston/backend-drm/drm-internal.h
+++ b/libweston/backend-drm/drm-internal.h
@@ -487,6 +487,7 @@ struct drm_plane {
 	struct wl_list link;
 
 	bool is_video_plane;
+	int video_plane;

 	struct weston_drm_format_array formats;
 };
@@ -581,6 +582,7 @@ struct drm_output {
 	struct wl_event_source *pageflip_timer;

 	bool virtual;
+	int video_plane_count;

 	submit_frame_cb virtual_submit_frame;
 
diff --git a/libweston/backend-drm/drm.c b/libweston/backend-drm/drm.c
index 7cd75c3..f205c37 100644
--- a/libweston/backend-drm/drm.c
+++ b/libweston/backend-drm/drm.c
@@ -1859,6 +1859,15 @@ drm_output_enable(struct weston_output *base)
 		   output->base.name, output->crtc->crtc_id);
 	drm_output_print_modes(output);
 
+	struct drm_plane *plane;
+	wl_list_for_each(plane, &b->plane_list, link) {
+		if (!drm_plane_is_available(plane, output))
+			continue;
+		if (plane->is_video_plane)
+			plane->video_plane = output->video_plane_count++;
+	}
+	weston_log("drm_output_enable plane id:%d is_video_plane:%d video plane:%d \n",
+	plane->plane_id, plane->is_video_plane, plane->video_plane);
 	return 0;
 
 err_planes:
@@ -2271,6 +2280,7 @@ drm_output_create(struct weston_compositor *compositor, const char *name)
 
 	output->destroy_pending = false;
 	output->disable_pending = false;
+	output->video_plane_count = 0;
 
 	output->state_cur = drm_output_state_alloc(output, NULL);
 
diff --git a/libweston/backend-drm/kms.c b/libweston/backend-drm/kms.c
index 011d938..9e7520d 100644
--- a/libweston/backend-drm/kms.c
+++ b/libweston/backend-drm/kms.c
@@ -986,6 +986,8 @@ drm_output_apply_state_atomic(struct drm_output_state *state,
 	wl_list_for_each(plane_state, &state->plane_list, link) {
 		struct drm_plane *plane = plane_state->plane;
 		const struct pixel_format_info *pinfo = NULL;
+		if ( !plane_state->fb )
+			continue;
 
 		ret |= plane_add_prop(req, plane, WDRM_PLANE_FB_ID,
 				      plane_state->fb ? plane_state->fb->fb_id : 0);
diff --git a/libweston/backend-drm/state-propose.c b/libweston/backend-drm/state-propose.c
index 3ff5a8d..1228820 100644
--- a/libweston/backend-drm/state-propose.c
+++ b/libweston/backend-drm/state-propose.c
@@ -491,12 +491,13 @@ drm_output_try_view_on_plane(struct drm_plane *plane,
 		scanout_has_view_assigned =
 			drm_output_check_plane_has_view_assigned(scanout_plane,
 								 state);
-
+#if 0
 		if (view_matches_entire_output && !scanout_has_view_assigned) {
 			availability = NO_PLANES_ACCEPTED;
 			goto out;
 		}
-
+#endif
+		drm_debug(b, "\t\t\t\t[overlay]  view %p WDRM_PLANE_TYPE_OVERLAY\n", ev);
 		ps = drm_output_prepare_overlay_view(plane, state, ev, mode,
 						     fb, zpos);
 		if (ps)
@@ -811,6 +812,19 @@ drm_output_prepare_plane_view(struct drm_output_state *state,
 		drm_debug(b, "\t\t\t\t[plane] plane %d picked "
 			     "from candidate list, type: %s\n",
 			     plane->plane_id, p_name);
+		if (ev && ev->surface && plane) {
+			if (ev->surface->video_plane != 255 && ev->surface->is_video_surface) {
+				if (plane->is_video_plane && ev->surface->video_plane != plane->video_plane) {
+					drm_debug(b, "\t\t\t\t[plane] plane %d is video plane:%d  type: %s, "
+					"surface was assighed to video plane:%d, continue\n",
+					plane->plane_id, plane->video_plane,p_name,ev->surface->video_plane);
+					drm_output_destroy_zpos_plane(head_p_zpos);
+					continue;
+				}
+			}
+		}
+		drm_debug(b, "\t\t\t\t[plane] try view on plane %d \n",
+				plane->plane_id );

 		ps = drm_output_try_view_on_plane(plane, state, ev,
 						  mode, fb, zpos);
@@ -959,6 +973,7 @@ drm_output_propose_state(struct weston_output *output_base,
 		 * view; includes the case where occluded_region covers
 		 * the entire output */
 		totally_occluded = !pixman_region32_not_empty(&surface_overlap);
+	if (!ev->surface->is_video_surface) {
 		if (totally_occluded) {
 #if MESON_VIDEO_PLAN_SUPPORT
 			// if occluded , we need set the clip, to make sure it will not draw when glrenderer.
@@ -971,7 +986,7 @@ drm_output_propose_state(struct weston_output *output_base,
 			pixman_region32_fini(&clipped_view);
 			continue;
 		}
-
+	}
 		/* We only assign planes to views which are exclusively present
 		 * on our output. */
 		if (ev->output_mask != (1u << output->base.id)) {
diff --git a/libweston/compositor.c b/libweston/compositor.c
index 0a242af..0d80fec 100755
--- a/libweston/compositor.c
+++ b/libweston/compositor.c
@@ -695,6 +695,8 @@ weston_surface_create(struct weston_compositor *compositor)
 	video_buffer_release[FRAME_FREE] = NULL;

 #endif
+	surface->video_plane = 255;
+
 	return surface;
 }

@@ -2697,6 +2699,8 @@ weston_buffer_release_move(struct weston_buffer_release_reference *dest,
 	weston_buffer_release_reference(src, NULL);
 }
 
+#define MAX_VIDEO_SURFACE 2
+
 static void
 weston_surface_attach(struct weston_surface *surface,
 		      struct weston_buffer *buffer)
@@ -2735,7 +2739,12 @@ weston_surface_attach(struct weston_surface *surface,
 		}
 	}
 #endif
-
+	if (surface->is_video_surface && surface->video_plane == 255) {
+		surface->video_plane = surface->compositor->video_surface_count;
+		surface->compositor->video_surface_count++;
+		if (surface->compositor->video_surface_count >= MAX_VIDEO_SURFACE )
+			surface->compositor->video_surface_count = 0;
+	}
 	surface->compositor->renderer->attach(surface, buffer);

 	weston_surface_calculate_size_from_buffer(surface);
@@ -3692,6 +3701,17 @@ surface_damage(struct wl_client *client,
 				   &surface->pending.damage_surface,
 				   x, y, width, height);
 }
+		   
+static void
+surface_set_video_plane(struct wl_client *client,
+	       struct wl_resource *resource,
+	       int32_t video_plane)
+{
+	struct weston_surface *surface = wl_resource_get_user_data(resource);
+	if (video_plane < 0)
+		return;
+	surface->video_plane = video_plane;
+}
 
 static void
 surface_damage_buffer(struct wl_client *client,
@@ -4270,7 +4290,8 @@ static const struct wl_surface_interface surface_interface = {
 	surface_commit,
 	surface_set_buffer_transform,
 	surface_set_buffer_scale,
-	surface_damage_buffer
+	surface_damage_buffer,
+	surface_set_video_plane
 };
 
 static int
@@ -7751,9 +7772,9 @@ debug_scene_view_print(FILE *fp, struct weston_view *view, int view_idx)
 	    view->surface->get_label(view->surface, desc, sizeof(desc)) < 0) {
 		strcpy(desc, "[no description available]");
 	}
-	fprintf(fp, "\tView %d (role %s, PID %d, surface ID %u, %s, %p %p):\n",
+	fprintf(fp, "\tView %d (role %s, PID %d, surface ID %u, %s, %p is video surface:%d, video plane:%d):\n",
 		view_idx, view->surface->role_name, pid, surface_id,
-		desc, view, view->surface);
+		desc, view, view->surface->is_video_surface, view->surface->is_video_surface ? view->surface->video_plane : 0);

 	box = pixman_region32_extents(&view->transform.boundingbox);
 	fprintf(fp, "\t\tposition: (%d, %d) -> (%d, %d)\n",
