From 66a2d6d16e6a4f01e61498678bae28bc7b4ca37e Mon Sep 17 00:00:00 2001
From: HenryLee <henry_1_lee@163.com>
Date: Wed, 3 Jan 2024 11:54:56 +0800
Subject: [PATCH] add arka dvb client

Signed-off-by: HenryLee <henry_1_lee@163.com>
---
 clients/arkadvb.c   | 598 ++++++++++++++++++++++++++++++++++++++++++++
 clients/meson.build |   8 +-
 2 files changed, 605 insertions(+), 1 deletion(-)
 create mode 100644 clients/arkadvb.c

diff --git a/clients/arkadvb.c b/clients/arkadvb.c
new file mode 100644
index 0000000..13579b1
--- /dev/null
+++ b/clients/arkadvb.c
@@ -0,0 +1,598 @@
+/*
+ * Copyright Â© 2011 Tim Wiederhake
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+/**
+ * \file arkadvb.c
+ * \brief Demonstrate the use of Wayland's toytoolkit.
+ *
+ * Heavily commented demo program that can report all events that are
+ * dispatched to the window. For other functionality, eg. opengl/egl,
+ * drag and drop, etc. have a look at the other demos.
+ * \author Tim Wiederhake
+ */
+
+#include "config.h"
+
+#include <stdint.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <stdbool.h>
+#include <string.h>
+#include <errno.h>
+
+#include <cairo.h>
+
+#include "shared/helpers.h"
+#include "window.h"
+
+/*********** arka dvb app related content ***********/
+#include <dlfcn.h>
+typedef void (*OnArkaRun) (void);
+typedef void (*OnArkaStop) (void);
+OnArkaRun p_arka_run;
+OnArkaStop p_arka_stop;
+void *handle = NULL;
+pthread_t arka_thread_tid;
+
+static void arka_dvb_init() {
+  if (NULL == handle)
+    handle = dlopen("/usr/lib/libArka.so", RTLD_LAZY);
+  if (handle) {
+    p_arka_run = (OnArkaRun)dlsym(handle, "arka_run");
+    p_arka_stop = (OnArkaRun)dlsym(handle, "arka_stop");
+    if (!p_arka_run || !p_arka_stop) {
+      printf("arka dvb init failed\n");
+      return;
+    }
+  }
+}
+
+static void arka_dvb_run() {
+  printf("In %s() <--> line:%d\n", __func__, __LINE__);
+  p_arka_run();
+}
+
+static void arka_dvb_deinit() {
+  printf("In %s() <--> line:%d\n", __func__, __LINE__);
+  p_arka_stop();
+  if (handle) dlclose(handle);
+}
+
+static void *arka_thread(void *arg) {
+  arka_dvb_run();
+}
+/********************************************************/
+
+/** window title */
+static char *title = "EventDemo";
+static char *appid = "org.freedesktop.weston.arkadvb";
+
+/** window width */
+static int width = 1920;
+
+/** window height */
+static int height = 1080;
+
+/** set if window has no borders */
+static bool noborder = true;
+
+/** if non-zero, maximum window width */
+static int width_max = 0;
+
+/** if non-zero, maximum window height */
+static int height_max = 0;
+
+/** set to log redrawing */
+static bool log_redraw = false;
+
+/** set to log resizing */
+static bool log_resize = false;
+
+/** set to log keyboard focus */
+static bool log_focus = false;
+
+/** set to log key events */
+static bool log_key = false;
+
+/** set to log button events */
+static bool log_button = false;
+
+/** set to log axis events */
+static bool log_axis = false;
+
+/** set to log motion events */
+static bool log_motion = false;
+
+/**
+ * \struct arkadvb
+ * \brief Holds all data the program needs per window
+ *
+ * In this demo the struct holds the position of a
+ * red rectangle that is drawn in the window's area.
+ */
+struct arkadvb {
+	struct window *window;
+	struct widget *widget;
+	struct display *display;
+
+	int x, y, w, h;
+
+	bool print_pointer_frame;
+};
+
+/**
+ * \brief CALLBACK function, Wayland requests the window to redraw.
+ * \param widget widget to be redrawn
+ * \param data user data associated to the window
+ *
+ * Draws a red rectangle as demonstration of per-window data.
+ */
+static void
+redraw_handler(struct widget *widget, void *data)
+{
+	struct arkadvb *e = data;
+	cairo_surface_t *surface;
+	cairo_t *cr;
+	struct rectangle rect;
+
+	if (log_redraw)
+		printf("redraw\n");
+
+	widget_get_allocation(e->widget, &rect);
+	surface = window_get_surface(e->window);
+
+	cr = cairo_create(surface);
+	cairo_set_operator(cr, CAIRO_OPERATOR_SOURCE);
+
+	cairo_rectangle(cr, rect.x, rect.y, rect.width, rect.height);
+	cairo_set_source_rgba(cr, 0, 0, 0, 0.8);
+	cairo_fill(cr);
+
+	cairo_rectangle(cr, e->x, e->y, e->w, e->h);
+	cairo_set_source_rgba(cr, 0, 0, 0, 0);
+	cairo_fill(cr);
+
+	cairo_destroy(cr);
+	cairo_surface_destroy(surface);
+}
+
+/**
+ * \brief CALLBACK function, Wayland requests the window to resize.
+ * \param widget widget to be resized
+ * \param width desired width
+ * \param height desired height
+ * \param data user data associated to the window
+ */
+
+static void
+resize_handler(struct widget *widget,
+	       int32_t width, int32_t height, void *data)
+{
+	struct arkadvb *e = data;
+	if (log_resize)
+		printf("resize width: %d, height: %d\n", width, height);
+
+	/* if a maximum width is set, constrain to it */
+	if (width_max && width_max < width)
+		width = width_max;
+
+	/* if a maximum height is set, constrain to it */
+	if (height_max && height_max < height)
+		height = height_max;
+
+	/* set the new window dimensions */
+	widget_set_size(e->widget, width, height);
+}
+
+/**
+ * \brief CALLBACK function, Wayland informs about keyboard focus change
+ * \param window window
+ * \param device device that caused the focus change
+ * \param data user data associated to the window
+ */
+static void
+keyboard_focus_handler(struct window *window,
+		       struct input *device, void *data)
+{
+	int32_t x, y;
+	struct arkadvb *e = data;
+
+	if (log_focus) {
+		if (device) {
+			input_get_position(device, &x, &y);
+			printf("focus x: %d, y: %d\n", x, y);
+		} else {
+			printf("focus lost\n");
+		}
+	}
+
+	window_schedule_redraw(e->window);
+}
+
+/**
+ * \brief CALLBACK function, Wayland informs about key event
+ * \param window window
+ * \param input input
+ * \param time time
+ * \param key keycode
+ * \param unicode associated character
+ * \param state pressed or released
+ * \param data user data associated to the window
+ */
+static void
+key_handler(struct window *window, struct input *input, uint32_t time,
+            uint32_t key, uint32_t unicode, enum wl_keyboard_key_state state,
+	    void *data)
+{
+	uint32_t modifiers = input_get_modifiers(input);
+
+	if (!log_key)
+		return;
+
+	printf("key key: %u, unicode: %u, state: %s, modifiers: 0x%x\n",
+	       key, unicode,
+	       (state == WL_KEYBOARD_KEY_STATE_PRESSED) ? "pressed" :
+							  "released",
+	       modifiers);
+}
+
+/**
+ * \brief CALLBACK function, Wayland informs about button event
+ * \param widget widget
+ * \param input input device that caused the button event
+ * \param time time the event happened
+ * \param button button
+ * \param state pressed or released
+ * \param data user data associated to the window
+ */
+static void
+button_handler(struct widget *widget, struct input *input, uint32_t time,
+	       uint32_t button, enum wl_pointer_button_state state, void *data)
+{
+	struct arkadvb *e = data;
+	int32_t x, y;
+
+	if (!log_button)
+		return;
+
+	e->print_pointer_frame = true;
+
+	input_get_position(input, &x, &y);
+	printf("button time: %u, button: %u, state: %s, x: %d, y: %d\n",
+	       time, button,
+	       (state == WL_POINTER_BUTTON_STATE_PRESSED) ? "pressed" :
+							    "released",
+	       x, y);
+}
+
+/**
+ * \brief CALLBACK function, Wayland informs about axis event
+ * \param widget widget
+ * \param input input device that caused the axis event
+ * \param time time the event happened
+ * \param axis vertical or horizontal
+ * \param value amount of scrolling
+ * \param data user data associated to the widget
+ */
+static void
+axis_handler(struct widget *widget, struct input *input, uint32_t time,
+	     uint32_t axis, wl_fixed_t value, void *data)
+{
+	struct arkadvb *e = data;
+
+	if (!log_axis)
+		return;
+
+	e->print_pointer_frame = true;
+
+	printf("axis time: %u, axis: %s, value: %f\n",
+	       time,
+	       axis == WL_POINTER_AXIS_VERTICAL_SCROLL ? "vertical" :
+							 "horizontal",
+	       wl_fixed_to_double(value));
+}
+
+static void
+pointer_frame_handler(struct widget *widget, struct input *input, void *data)
+{
+	struct arkadvb *e = data;
+
+	if (!e->print_pointer_frame)
+		return;
+
+	printf("pointer frame\n");
+	e->print_pointer_frame = false;
+}
+
+static void
+axis_source_handler(struct widget *widget, struct input *input,
+		    uint32_t source, void *data)
+{
+	const char *axis_source;
+	struct arkadvb *e = data;
+
+	if (!log_axis)
+		return;
+
+	e->print_pointer_frame = true;
+
+	switch (source) {
+	case WL_POINTER_AXIS_SOURCE_WHEEL:
+		axis_source = "wheel";
+		break;
+	case WL_POINTER_AXIS_SOURCE_FINGER:
+		axis_source = "finger";
+		break;
+	case WL_POINTER_AXIS_SOURCE_CONTINUOUS:
+		axis_source = "continuous";
+		break;
+	default:
+		axis_source = "<invalid source value>";
+		break;
+	}
+
+	printf("axis source: %s\n", axis_source);
+}
+
+static void
+axis_stop_handler(struct widget *widget, struct input *input,
+		  uint32_t time, uint32_t axis,
+		  void *data)
+{
+	struct arkadvb *e = data;
+
+	if (!log_axis)
+		return;
+
+	e->print_pointer_frame = true;
+	printf("axis stop time: %u, axis: %s\n",
+	       time,
+	       axis == WL_POINTER_AXIS_VERTICAL_SCROLL ? "vertical" :
+							 "horizontal");
+}
+
+static void
+axis_discrete_handler(struct widget *widget, struct input *input,
+		      uint32_t axis, int32_t discrete, void *data)
+{
+	struct arkadvb *e = data;
+
+	if (!log_axis)
+		return;
+
+	e->print_pointer_frame = true;
+	printf("axis discrete axis: %u value: %d\n", axis, discrete);
+}
+
+/**
+ * \brief CALLBACK function, Waylands informs about pointer motion
+ * \param widget widget
+ * \param input input device that caused the motion event
+ * \param time time the event happened
+ * \param x absolute x position
+ * \param y absolute y position
+ * \param x x position relative to the window
+ * \param y y position relative to the window
+ * \param data user data associated to the window
+ *
+ * Demonstrates the use of different cursors
+ */
+static int
+motion_handler(struct widget *widget, struct input *input, uint32_t time,
+	       float x, float y, void *data)
+{
+	struct arkadvb *e = data;
+
+	if (log_motion) {
+		printf("motion time: %u, x: %f, y: %f\n", time, x, y);
+		e->print_pointer_frame = true;
+	}
+
+	if (x > e->x && x < e->x + e->w)
+		if (y > e->y && y < e->y + e->h)
+			return CURSOR_HAND1;
+
+	return CURSOR_LEFT_PTR;
+}
+
+/**
+ * \brief Create and initialise a new arkadvb window.
+ * The returned arkadvb instance should be destroyed using \c arkadvb_destroy().
+ * \param d associated display
+ */
+static struct arkadvb *
+arkadvb_create(struct display *d)
+{
+	struct arkadvb *e;
+
+	e = zalloc(sizeof (struct arkadvb));
+	if (e == NULL)
+		return NULL;
+
+	e->window = window_create(d);
+
+	if (noborder) {
+		/* Demonstrate how to create a borderless window.
+		 * Move windows with META + left mouse button.
+		 */
+		e->widget = window_add_widget(e->window, e);
+	} else {
+		e->widget = window_frame_create(e->window, e);
+		//window_set_title(e->window, title);
+		//window_set_appid(e->window, appid);
+	}
+	e->display = d;
+
+	/* The arkadvb window draws a red rectangle as a demonstration
+	 * of per-window data. The dimensions of that rectangle are set
+	 * here.
+	 */
+	e->x = width * 1.0 / 4.0;
+	e->w = width * 2.0 / 4.0;
+	e->y = height * 1.0 / 4.0;
+	e->h = height * 2.0 / 4.0;
+
+	/* Connect the user data to the window */
+	window_set_user_data(e->window, e);
+
+	/* Set the callback redraw handler for the window */
+	widget_set_redraw_handler(e->widget, redraw_handler);
+
+	/* Set the callback resize handler for the window */
+	widget_set_resize_handler(e->widget, resize_handler);
+
+#if 0
+	/* Set the callback focus handler for the window */
+	window_set_keyboard_focus_handler(e->window,
+					  keyboard_focus_handler);
+
+	/* Set the callback key handler for the window */
+	window_set_key_handler(e->window, key_handler);
+
+	/* Set the callback button handler for the window */
+	widget_set_button_handler(e->widget, button_handler);
+
+	/* Set the callback motion handler for the window */
+	widget_set_motion_handler(e->widget, motion_handler);
+
+	/* Set the callback pointer frame handler for the window */
+	widget_set_pointer_frame_handler(e->widget, pointer_frame_handler);
+
+	/* Set the callback axis handler for the window */
+	widget_set_axis_handlers(e->widget,
+				 axis_handler,
+				 axis_source_handler,
+				 axis_stop_handler,
+				 axis_discrete_handler);
+#endif
+
+	/* Initial drawing of the window */
+	window_schedule_resize(e->window, width, height);
+
+	return e;
+}
+/**
+ * \brief Destroy arkadvb instance previously created by \c arkadvb_create().
+ * \param arkadvb arkadvb instance to destroy
+ */
+static void arkadvb_destroy(struct arkadvb * arkadvb)
+{
+	widget_destroy(arkadvb->widget);
+	window_destroy(arkadvb->window);
+	free(arkadvb);
+}
+/**
+ * \brief command line options for arkadvb
+ */
+static const struct weston_option arkadvb_options[] = {
+	{ WESTON_OPTION_STRING, "title", 0, &title },
+	{ WESTON_OPTION_INTEGER, "width", 'w', &width },
+	{ WESTON_OPTION_INTEGER, "height", 'h', &height },
+	{ WESTON_OPTION_INTEGER, "max-width", 0, &width_max },
+	{ WESTON_OPTION_INTEGER, "max-height", 0, &height_max },
+	{ WESTON_OPTION_BOOLEAN, "no-border", 'b', &noborder },
+	{ WESTON_OPTION_BOOLEAN, "log-redraw", 0, &log_redraw },
+	{ WESTON_OPTION_BOOLEAN, "log-resize", 0, &log_resize },
+	{ WESTON_OPTION_BOOLEAN, "log-focus", 0, &log_focus },
+	{ WESTON_OPTION_BOOLEAN, "log-key", 0, &log_key },
+	{ WESTON_OPTION_BOOLEAN, "log-button", 0, &log_button },
+	{ WESTON_OPTION_BOOLEAN, "log-axis", 0, &log_axis },
+	{ WESTON_OPTION_BOOLEAN, "log-motion", 0, &log_motion },
+};
+
+
+/**
+ * \brief Connects to the display, creates the window and hands over
+ * to the main loop.
+ */
+int
+main(int argc, char *argv[])
+{
+	struct display *d;
+	struct arkadvb *e;
+
+	if (parse_options(arkadvb_options,
+			  ARRAY_LENGTH(arkadvb_options), &argc, argv) > 1) {
+		unsigned k;
+		printf("Usage: %s [OPTIONS]\n\n", argv[0]);
+		for (k = 0; k < ARRAY_LENGTH(arkadvb_options); k++) {
+			const struct weston_option* p = &arkadvb_options[k];
+			if (p->name) {
+				printf("  --%s", p->name);
+				if (p->type != WESTON_OPTION_BOOLEAN)
+					printf("=VALUE");
+				putchar('\n');
+			}
+			if (p->short_name) {
+				printf("  -%c", p->short_name);
+				if (p->type != WESTON_OPTION_BOOLEAN)
+					printf("VALUE");
+				putchar('\n');
+			}
+		}
+		return 1;
+	}
+
+	if (!log_redraw && !log_resize && !log_focus && !log_key &&
+	    !log_button && !log_axis && !log_motion)
+	  log_redraw = log_resize = log_focus = log_key =
+	    log_button = log_axis = log_motion = true;
+
+	arka_dvb_init();
+
+	/* call libArka.so related interfaces */
+	int err;
+	err = pthread_create(&arka_thread_tid, NULL, &arka_thread, NULL);
+	if (err != 0) {
+		fprintf(stderr, "failed to create arka thread: %s\n",
+			strerror(errno));
+		return -1;
+	}
+
+	/* Connect to the display and have the arguments parsed */
+
+	d = display_create(&argc, argv);
+	if (d == NULL) {
+		fprintf(stderr, "failed to create display: %s\n",
+			strerror(errno));
+		return -1;
+	}
+
+	/* Create new arkadvb window */
+	e = arkadvb_create(d);
+	if (e == NULL) {
+		fprintf(stderr, "failed to create arkadvb: %s\n",
+			strerror(errno));
+		return -1;
+	}
+
+	display_run(d);
+
+	/* Release resources */
+	arkadvb_destroy(e);
+	display_destroy(d);
+
+	pthread_join(arka_thread_tid, NULL);
+
+	return 0;
+}
diff --git a/clients/meson.build b/clients/meson.build
index 362f7fe..013da4c 100644
--- a/clients/meson.build
+++ b/clients/meson.build
@@ -285,6 +285,9 @@ demo_clients = [
 		'deps': [ 'pangocairo', 'gobject-2.0' ]
 	},
 	{ 'basename': 'eventdemo' },
+	{
+	  'basename': 'arkadvb',
+	},
 	{ 'basename': 'flower' },
 	{
 		'basename': 'fullscreen',
@@ -327,6 +330,7 @@ demo_clients = [
 	{ 'basename': 'transformed' },
 ]
 
+lib_arka_dep = declare_dependency(link_args : ['-lpthread', '-ldl'])
 if get_option('demo-clients')
 	foreach t : demo_clients
 		t_name = 'weston-' + t.get('basename')
@@ -339,6 +343,9 @@ if get_option('demo-clients')
 			endif
 			t_deps += dep
 		endforeach
+		if t.get('basename') == 'arkadvb'
+			t_deps += lib_arka_dep
+		endif
 
 		executable(
 			t_name, t_srcs,
@@ -389,7 +396,6 @@ if get_option('shell-desktop')
 	env_modmap += 'weston-desktop-shell=@0@;'.format(exe_shell_desktop.full_path())
 endif
 
-
 if get_option('shell-ivi')
 	exe_shell_ivi_ui = executable(
 		'weston-ivi-shell-user-interface',
-- 
2.25.1

