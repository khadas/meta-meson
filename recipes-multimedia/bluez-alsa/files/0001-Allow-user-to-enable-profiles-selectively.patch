From c3a1c3520b1ec8bb9856492d26a73805dfa6b19c Mon Sep 17 00:00:00 2001
From: Arkadiusz Bokowy <arkadiusz.bokowy@gmail.com>
Date: Thu, 5 Apr 2018 22:02:09 +0200
Subject: [PATCH] Allow user to enable profiles selectively

This commit breaks backward compatibility, however migration process
should be rather painless, so there is no need to keep "dead" code.
---
 src/bluealsa.c | 10 ++++----
 src/bluealsa.h | 14 +++++++---
 src/bluez.c    | 38 +++++++++++++++------------
 src/main.c     | 70 ++++++++++++++++++++++++++++++++++++--------------
 4 files changed, 87 insertions(+), 45 deletions(-)

diff --git a/src/bluealsa.c b/src/bluealsa.c
index 0b8d955..7d89996 100644
--- a/src/bluealsa.c
+++ b/src/bluealsa.c
@@ -1,6 +1,6 @@
 /*
  * BlueALSA - bluealsa.c
- * Copyright (c) 2016-2017 Arkadiusz Bokowy
+ * Copyright (c) 2016-2018 Arkadiusz Bokowy
  *
  * This file is a part of bluez-alsa.
  *
@@ -18,10 +18,10 @@
 /* Initialize global configuration variable. */
 struct ba_config config = {
 
-	/* by default all profiles are enabled */
-	.enable_a2dp = true,
-	.enable_hsp = true,
-	.enable_hfp = true,
+	/* enable output profiles by default */
+	.enable.a2dp_source = true,
+	.enable.hsp_ag = true,
+	.enable.hfp_ag = true,
 
 	/* initialization flags */
 	.ctl.socket_created = false,
diff --git a/src/bluealsa.h b/src/bluealsa.h
index 04cf4a1..5985bbc 100644
--- a/src/bluealsa.h
+++ b/src/bluealsa.h
@@ -1,6 +1,6 @@
 /*
  * BlueALSA - bluealsa.h
- * Copyright (c) 2016 Arkadiusz Bokowy
+ * Copyright (c) 2016-2018 Arkadiusz Bokowy
  *
  * This file is a part of bluez-alsa.
  *
@@ -41,9 +41,15 @@ struct ba_config {
 	/* used HCI device */
 	struct hci_dev_info hci_dev;
 
-	bool enable_a2dp;
-	bool enable_hsp;
-	bool enable_hfp;
+	/* set of enabled profiles */
+	struct {
+		bool a2dp_source;
+		bool a2dp_sink;
+		bool hsp_hs;
+		bool hsp_ag;
+		bool hfp_hf;
+		bool hfp_ag;
+	} enable;
 
 	/* established D-Bus connection */
 	GDBusConnection *dbus;
diff --git a/src/bluez.c b/src/bluez.c
index 236d4f3..861e806 100644
--- a/src/bluez.c
+++ b/src/bluez.c
@@ -736,22 +736,26 @@ final:
 /**
  * Register A2DP endpoints. */
 void bluez_register_a2dp(void) {
-	if (!config.enable_a2dp)
-		return;
+	if (config.enable.a2dp_source) {
 #if ENABLE_AAC
-	bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
-			A2DP_CODEC_MPEG24, &bluez_a2dp_aac, sizeof(bluez_a2dp_aac));
-	bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SINK, BLUETOOTH_PROFILE_A2DP_SINK,
-			A2DP_CODEC_MPEG24, &bluez_a2dp_aac, sizeof(bluez_a2dp_aac));
+		bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
+				A2DP_CODEC_MPEG24, &bluez_a2dp_aac, sizeof(bluez_a2dp_aac));
 #endif
 #if ENABLE_APTX
-	bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
-			A2DP_CODEC_VENDOR_APTX, &bluez_a2dp_aptx, sizeof(bluez_a2dp_aptx));
+		bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
+				A2DP_CODEC_VENDOR_APTX, &bluez_a2dp_aptx, sizeof(bluez_a2dp_aptx));
 #endif
-	bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
-			A2DP_CODEC_SBC, &bluez_a2dp_sbc, sizeof(bluez_a2dp_sbc));
-	bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SINK, BLUETOOTH_PROFILE_A2DP_SINK,
-			A2DP_CODEC_SBC, &bluez_a2dp_sbc, sizeof(bluez_a2dp_sbc));
+		bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SOURCE, BLUETOOTH_PROFILE_A2DP_SOURCE,
+				A2DP_CODEC_SBC, &bluez_a2dp_sbc, sizeof(bluez_a2dp_sbc));
+	}
+	if (config.enable.a2dp_sink) {
+#if ENABLE_AAC
+		bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SINK, BLUETOOTH_PROFILE_A2DP_SINK,
+				A2DP_CODEC_MPEG24, &bluez_a2dp_aac, sizeof(bluez_a2dp_aac));
+#endif
+		bluez_register_a2dp_endpoint(BLUETOOTH_UUID_A2DP_SINK, BLUETOOTH_PROFILE_A2DP_SINK,
+				A2DP_CODEC_SBC, &bluez_a2dp_sbc, sizeof(bluez_a2dp_sbc));
+	}
 }
 
 static void bluez_profile_new_connection(GDBusMethodInvocation *inv, void *userdata) {
@@ -963,14 +967,14 @@ final:
  * is controlled by the global configuration structure - if none is enabled,
  * this function will do nothing. */
 void bluez_register_hfp(void) {
-	if (config.enable_hsp) {
+	if (config.enable.hsp_hs)
 		bluez_register_profile(BLUETOOTH_UUID_HSP_HS, BLUETOOTH_PROFILE_HSP_HS, 0x0, 0x0);
+	if (config.enable.hsp_ag)
 		bluez_register_profile(BLUETOOTH_UUID_HSP_AG, BLUETOOTH_PROFILE_HSP_AG, 0x0, 0x0);
-	}
-	if (config.enable_hfp) {
+	if (config.enable.hfp_hf)
 		bluez_register_profile(BLUETOOTH_UUID_HFP_HF, BLUETOOTH_PROFILE_HFP_HF, 0x0107, 0x0);
+	if (config.enable.hfp_ag)
 		bluez_register_profile(BLUETOOTH_UUID_HFP_AG, BLUETOOTH_PROFILE_HFP_AG, 0x0107, 0x0);
-	}
 }
 
 static void bluez_signal_interfaces_added(GDBusConnection *conn, const gchar *sender,
@@ -989,7 +993,7 @@ static void bluez_signal_interfaces_added(GDBusConnection *conn, const gchar *se
 
 	g_variant_get(params, "(&oa{sa{sv}})", &object, &interfaces);
 
-	if (config.enable_a2dp && strcmp(object, device_path) == 0)
+	if (strcmp(object, device_path) == 0)
 		bluez_register_a2dp();
 	if (strcmp(object, "/org/bluez") == 0)
 		bluez_register_hfp();
diff --git a/src/main.c b/src/main.c
index 366fb58..79d07b7 100644
--- a/src/main.c
+++ b/src/main.c
@@ -47,15 +47,13 @@ static void main_loop_stop(int sig) {
 int main(int argc, char **argv) {
 
 	int opt;
-	const char *opts = "hVSi:";
+	const char *opts = "hVSi:p:";
 	const struct option longopts[] = {
 		{ "help", no_argument, NULL, 'h' },
 		{ "version", no_argument, NULL, 'V' },
 		{ "syslog", no_argument, NULL, 'S' },
 		{ "device", required_argument, NULL, 'i' },
-		{ "disable-a2dp", no_argument, NULL, 1 },
-		{ "disable-hsp", no_argument, NULL, 2 },
-		{ "disable-hfp", no_argument, NULL, 3 },
+		{ "profile", required_argument, NULL, 'p' },
 #if ENABLE_AAC
 		{ "aac-afterburner", no_argument, NULL, 4 },
 		{ "aac-vbr-mode", required_argument, NULL, 5 },
@@ -75,9 +73,14 @@ int main(int argc, char **argv) {
 	 * errors. */
 	opterr = 0;
 	while ((opt = getopt_long(argc, argv, opts, longopts, NULL)) != -1)
-		if (opt == 'S') {
+		switch (opt) {
+		case 'S':
 			syslog = true;
 			break;
+		case 'p':
+			/* reset defaults if user has specified profile option */
+			memset(&config.enable, 0, sizeof(config.enable));
+			break;
 		}
 
 	log_open(argv[0], syslog, BLUEALSA_LOGTIME);
@@ -110,15 +113,14 @@ int main(int argc, char **argv) {
 		switch (opt) {
 
 		case 'h' /* --help */ :
-			printf("usage: %s [OPTION]...\n"
-					"\noptions:\n"
+			printf("Usage:\n"
+					"  %s [OPTION]...\n"
+					"\nOptions:\n"
 					"  -h, --help\t\tprint this help and exit\n"
 					"  -V, --version\t\tprint version and exit\n"
 					"  -S, --syslog\t\tsend output to syslog\n"
 					"  -i, --device=hciX\tHCI device to use\n"
-					"  --disable-a2dp\tdisable A2DP support\n"
-					"  --disable-hsp\t\tdisable HSP support\n"
-					"  --disable-hfp\t\tdisable HFP support\n"
+					"  -p, --profile=NAME\tenable BT profile\n"
 					"  --a2dp-force-mono\tforce monophonic sound\n"
 					"  --a2dp-force-audio-cd\tforce 44.1 kHz sampling\n"
 					"  --a2dp-volume\t\tcontrol volume natively\n"
@@ -126,7 +128,18 @@ int main(int argc, char **argv) {
 					"  --aac-afterburner\tenable afterburner\n"
 					"  --aac-vbr-mode=NB\tset VBR mode to NB\n"
 #endif
-					, argv[0]);
+					"\nAvailable BT profiles:\n"
+					"  - a2dp-source\tAdvanced Audio Source\n"
+					"  - a2dp-sink\tAdvanced Audio Sink\n"
+					"  - hsp-hs\tHeadset\n"
+					"  - hsp-ag\tHeadset Audio Gateway\n"
+					"  - hfp-hf\tHands-Free\n"
+					"  - hfp-ag\tHands-Free Audio Gateway\n"
+					"\n"
+					"By default only output profiles are enabled, which includes A2DP Source and\n"
+					"HSP/HFP Audio Gateways. If one wants to enable other set of profiles, it is\n"
+					"required to explicitly specify all of them using `-p NAME` options.\n",
+					argv[0]);
 			return EXIT_SUCCESS;
 
 		case 'V' /* --version */ :
@@ -167,15 +180,34 @@ int main(int argc, char **argv) {
 			break;
 		}
 
-		case 1 /* --disable-a2dp */ :
-			config.enable_a2dp = false;
-			break;
-		case 2 /* --disable-hsp */ :
-			config.enable_hsp = false;
-			break;
-		case 3 /* --disable-hfp */ :
-			config.enable_hfp = false;
+		case 'p' /* --profile=NAME */ : {
+
+			size_t i;
+			const struct {
+				char *name;
+				bool *ptr;
+			} map[] = {
+				{ "a2dp-source", &config.enable.a2dp_source },
+				{ "a2dp-sink", &config.enable.a2dp_sink },
+				{ "hsp-hs", &config.enable.hsp_hs },
+				{ "hsp-ag", &config.enable.hsp_ag },
+				{ "hfp-hf", &config.enable.hfp_hf },
+				{ "hfp-ag", &config.enable.hfp_ag },
+			};
+
+			for (i = 0; i < sizeof(map) / sizeof(*map); i++)
+				if (strcasecmp(optarg, map[i].name) == 0) {
+					*map[i].ptr = true;
+					break;
+				}
+
+			if (i == sizeof(map) / sizeof(*map)) {
+				error("Invalid BT profile name: %s", optarg);
+				return EXIT_FAILURE;
+			}
+
 			break;
+		}
 
 #if ENABLE_AAC
 		case 4 /* --aac-afterburner */ :
-- 
2.29.0

