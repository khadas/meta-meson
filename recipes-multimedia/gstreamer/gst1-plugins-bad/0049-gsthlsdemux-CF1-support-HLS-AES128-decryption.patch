Index: gst-plugins-bad-1.16.3/ext/hls/gsthlsdemux.c
===================================================================
--- gst-plugins-bad-1.16.3.orig/ext/hls/gsthlsdemux.c
+++ gst-plugins-bad-1.16.3/ext/hls/gsthlsdemux.c
@@ -61,6 +61,7 @@ GST_DEBUG_CATEGORY (gst_hls_demux_debug)
 #define GST_M3U8_CLIENT_LOCK(l) /* FIXME */
 #define GST_M3U8_CLIENT_UNLOCK(l)       /* FIXME */
 
+#define	MIN_ALIGN_SIZE	752
 
 /* GObject */
 static void gst_hls_demux_finalize (GObject * obj);
@@ -130,6 +131,8 @@ enum
 {
   PROP_0,
   PROP_USE_HW_DECRYPT,
+  PROP_ALIGN_SIZE,
+  PROP_MAX_SIZE,
 };
 
 static void
@@ -167,6 +170,13 @@ gst_hls_demux_class_init (GstHLSDemuxCla
       "Use hw decrypt",
       FALSE, G_PARAM_WRITABLE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property(gobject_class, PROP_ALIGN_SIZE,
+      g_param_spec_uint("alignsize", "align size", "set align size, must be a multiple of 752(188*16/4), only for AES128.",
+      MIN_ALIGN_SIZE, G_MAXINT, 30080, (GParamFlags)G_PARAM_WRITABLE ));
+  g_object_class_install_property(gobject_class, PROP_MAX_SIZE,
+      g_param_spec_uint("maxsize", "max size", "set max size, only for AES128.",
+      MIN_ALIGN_SIZE, G_MAXINT, 1018496, (GParamFlags)G_PARAM_WRITABLE ));
+
   gst_element_class_add_static_pad_template (element_class, &srctemplate);
   gst_element_class_add_static_pad_template (element_class, &sinktemplate);
 
@@ -214,6 +224,8 @@ gst_hls_demux_init (GstHLSDemux * demux)
 
   demux->keys = g_hash_table_new_full (g_str_hash, g_str_equal, g_free, g_free);
   g_mutex_init (&demux->keys_lock);
+  demux->alignsize = 30080;
+  demux->maxsize = 1018496;
 }
 
 void
@@ -229,6 +241,23 @@ gst_hls_demux_set_property (GObject * ob
         g_mutex_unlock (&demux->keys_lock);
         GST_INFO_OBJECT (demux, "use hw decrypt %d", demux->use_hw_decrypt);
         break;
+    case PROP_ALIGN_SIZE:
+        g_mutex_lock (&demux->keys_lock);
+        demux->alignsize = g_value_get_uint(value);
+        demux->alignsize = (demux->alignsize < MIN_ALIGN_SIZE?MIN_ALIGN_SIZE:demux->alignsize);
+        if (demux->alignsize%MIN_ALIGN_SIZE != 0) {
+            demux->alignsize = demux->alignsize/MIN_ALIGN_SIZE*MIN_ALIGN_SIZE;
+        }
+        g_mutex_unlock (&demux->keys_lock);
+        GST_INFO_OBJECT (demux, "set alignsize is %d", demux->alignsize);
+        break;
+    case PROP_MAX_SIZE:
+        g_mutex_lock (&demux->keys_lock);
+        demux->maxsize = g_value_get_uint(value);
+        demux->maxsize = (demux->maxsize < demux->alignsize)?demux->alignsize:demux->maxsize;
+        g_mutex_unlock (&demux->keys_lock);
+        GST_INFO_OBJECT (demux, "set maxsize is %d", demux->maxsize);
+        break;
     default:
         G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);
         break;
@@ -871,7 +900,7 @@ gst_hls_demux_handle_buffer (GstAdaptive
           info.size, &prob);
     }
 
-    if (G_UNLIKELY (!caps)) {
+    if (G_UNLIKELY (!caps) && (hls_stream->current_key_method != GST_HLS_KEY_METHOD_AES128)) {
       /* Won't need this mapping any more all paths return inside this if() */
       gst_buffer_unmap (buffer, &info);
 
@@ -891,6 +920,9 @@ gst_hls_demux_handle_buffer (GstAdaptive
 
     GST_DEBUG_OBJECT (hlsdemux, "current key method %d", hls_stream->current_key_method);
     if (hls_stream->current_key_method == GST_HLS_KEY_METHOD_AES128) {
+      caps = gst_caps_new_simple ("video/mpegts",
+          "systemstream", G_TYPE_BOOLEAN, TRUE,
+          "packetsize", G_TYPE_INT, 188, NULL);
       guint size = gst_caps_get_size(caps);
       for (guint i = 0; i < size; i++) {
         GstStructure *structure = gst_caps_get_structure(caps, i);
@@ -901,6 +933,17 @@ gst_hls_demux_handle_buffer (GstAdaptive
                      NULL);
         gst_structure_set_name(structure, "application/x-aes128-cbc");
       }
+      gchar *system_id = "";
+      GstBuffer *key_data = gst_buffer_new_wrapped (g_strdup (hls_stream->current_key_data),
+          strlen (hls_stream->current_key_data));
+      if (hls_stream->current_system_id)
+        system_id = hls_stream->current_system_id;
+
+      GstEvent *event =
+          gst_event_new_protection (system_id, key_data, "hls/aes-128");
+      gst_adaptive_demux_stream_queue_event(stream, event);
+      gst_buffer_unref(key_data);
+
     } else if (hls_stream->current_key_method == GST_HLS_KEY_METHOD_SAMPLE_AES) {
       gchar *system_id = "";
       GstBuffer *key_data = gst_buffer_new_wrapped (g_strdup (hls_stream->current_key_data),
@@ -993,12 +1036,27 @@ gst_hls_demux_finish_fragment (GstAdapti
   GstHLSDemux *hlsdemux = GST_HLS_DEMUX_CAST (demux);
   GstFlowReturn ret = GST_FLOW_OK;
 
-  if (hls_stream->current_key && hlsdemux->use_hw_decrypt == 0)
+  if (hls_stream->current_key && !hlsdemux->use_hw_decrypt)
     gst_hls_demux_stream_decrypt_end (hls_stream);
 
   if (stream->last_ret == GST_FLOW_OK) {
+    if (hls_stream->current_key_method == GST_HLS_KEY_METHOD_AES128 && hls_stream->pending_encrypted_data != NULL) {
+      guint size1 = gst_adapter_available (hls_stream->pending_encrypted_data);
+      guint size2 = 0, size3 = 0;
+      if(size1 > 0) {
+        GstBuffer* buffer = gst_adapter_take_buffer (hls_stream->pending_encrypted_data, size1);
+        if (hls_stream->pending_decrypted_buffer) {
+          size2 = gst_buffer_get_size(hls_stream->pending_decrypted_buffer);
+          gst_buffer_append(hls_stream->pending_decrypted_buffer, buffer);
+        } else {
+          hls_stream->pending_decrypted_buffer = buffer;
+        }
+        size3 = gst_buffer_get_size(hls_stream->pending_decrypted_buffer);
+      }
+      GST_INFO_OBJECT(hlsdemux, "gst_adapter_available size=%d, decrypt_buffer size=%d, sum=%d", size1, size2, size3);
+    }
     if (hls_stream->pending_decrypted_buffer) {
-      if (hls_stream->current_key) {
+      if (hls_stream->current_key && !hlsdemux->use_hw_decrypt) {
         GstMapInfo info;
         gssize unpadded_size;
 
@@ -1055,6 +1113,7 @@ static GstFlowReturn
 gst_hls_demux_data_received (GstAdaptiveDemux * demux,
     GstAdaptiveDemuxStream * stream, GstBuffer * buffer)
 {
+  GstFlowReturn ret = GST_FLOW_OK;
   GstHLSDemuxStream *hls_stream = GST_HLS_DEMUX_STREAM_CAST (stream);
   GstHLSDemux *hlsdemux = GST_HLS_DEMUX_CAST (demux);
 
@@ -1062,7 +1121,7 @@ gst_hls_demux_data_received (GstAdaptive
     hls_stream->current_offset = 0;
 
   /* Is it encrypted? */
-  if (hls_stream->current_key && hlsdemux->use_hw_decrypt == 0) {
+  if (hls_stream->current_key) {
     GError *err = NULL;
     gsize size;
     GstBuffer *tmp_buffer;
@@ -1071,31 +1130,44 @@ gst_hls_demux_data_received (GstAdaptive
       hls_stream->pending_encrypted_data = gst_adapter_new ();
 
     gst_adapter_push (hls_stream->pending_encrypted_data, buffer);
-    size = gst_adapter_available (hls_stream->pending_encrypted_data);
 
-    /* must be a multiple of 16 */
-    size &= (~0xF);
+    do {
+      size = gst_adapter_available (hls_stream->pending_encrypted_data);
 
-    if (size == 0) {
-      return GST_FLOW_OK;
-    }
+      /* must be a multiple of 16 */
+      size &= (~0xF);
+      if (hls_stream->current_key_method == GST_HLS_KEY_METHOD_AES128 && hlsdemux->use_hw_decrypt) {
+        size = size > hlsdemux->maxsize ? hlsdemux->maxsize : size;
+        size = size / hlsdemux->alignsize * hlsdemux->alignsize;
+      }
 
-    buffer = gst_adapter_take_buffer (hls_stream->pending_encrypted_data, size);
-    buffer =
-        gst_hls_demux_decrypt_fragment (hlsdemux, hls_stream, buffer, &err);
-    if (buffer == NULL) {
-      GST_ELEMENT_ERROR (demux, STREAM, DECODE, ("Failed to decrypt buffer"),
-          ("decryption failed %s", err->message));
-      g_error_free (err);
-      return GST_FLOW_ERROR;
-    }
+      if (size == 0) {
+        break;
+      }
+
+      buffer = gst_adapter_take_buffer (hls_stream->pending_encrypted_data, size);
+      if (!hlsdemux->use_hw_decrypt) {
+          buffer =
+              gst_hls_demux_decrypt_fragment (hlsdemux, hls_stream, buffer, &err);
+      }
+      if (buffer == NULL) {
+        GST_ELEMENT_ERROR (demux, STREAM, DECODE, ("Failed to decrypt buffer"),
+            ("decryption failed %s", err->message));
+        g_error_free (err);
+        return GST_FLOW_ERROR;
+      }
+
+      tmp_buffer = hls_stream->pending_decrypted_buffer;
+      hls_stream->pending_decrypted_buffer = buffer;
+      buffer = tmp_buffer;
+      ret = gst_hls_demux_handle_buffer (demux, stream, buffer, FALSE);
+    } while (ret == GST_FLOW_OK);
 
-    tmp_buffer = hls_stream->pending_decrypted_buffer;
-    hls_stream->pending_decrypted_buffer = buffer;
-    buffer = tmp_buffer;
+  } else {
+    ret = gst_hls_demux_handle_buffer (demux, stream, buffer, FALSE);
   }
 
-  return gst_hls_demux_handle_buffer (demux, stream, buffer, FALSE);
+  return ret;
 }
 
 static void
Index: gst-plugins-bad-1.16.3/ext/hls/gsthlsdemux.h
===================================================================
--- gst-plugins-bad-1.16.3.orig/ext/hls/gsthlsdemux.h
+++ gst-plugins-bad-1.16.3/ext/hls/gsthlsdemux.h
@@ -154,6 +154,8 @@ struct _GstHLSDemux
   GstHLSVariantStream  *current_variant;
 
   gboolean              use_hw_decrypt;
+  guint    alignsize;
+  guint    maxsize;
 };
 
 struct _GstHLSDemuxClass
