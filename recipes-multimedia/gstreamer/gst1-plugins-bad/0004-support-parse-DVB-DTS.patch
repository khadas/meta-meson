diff --git a/gst/mpegtsdemux/tsdemux.c b/gst/mpegtsdemux/tsdemux.c
index 68cac44..3532592 100644
--- a/gst/mpegtsdemux/tsdemux.c
+++ b/gst/mpegtsdemux/tsdemux.c
@@ -1443,6 +1443,13 @@ create_pad_for_stream (MpegTSBase * base, MpegTSBaseStream * bstream,
       /* FIXME: Move all of this into a common method (there might be other
        * types also, depending on registratino descriptors also
        */
+      desc = mpegts_get_descriptor_from_stream (bstream, GST_MTS_DESC_DVB_DTS);
+      if (desc) {
+        GST_LOG ("dts audio");
+        is_audio = TRUE;
+        caps = gst_caps_new_empty_simple ("audio/x-dts");
+        break;
+      }
 
       desc = mpegts_get_descriptor_from_stream_with_extension (bstream,
           GST_MTS_DESC_DVB_EXTENSION, GST_MTS_DESC_EXT_DVB_AC4);
@@ -3355,19 +3362,22 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream,
           "Got Keyframe, ready to go at %" GST_TIME_FORMAT,
           GST_TIME_ARGS (stream->pts));
 
-      if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS &&
-          bs->registration_id == DRF_ID_OPUS) {
-        buffer_list = parse_opus_access_unit (stream);
-        if (!buffer_list) {
-          res = GST_FLOW_ERROR;
-          goto beach;
-        }
-
-        if (gst_buffer_list_length (buffer_list) == 1) {
-          buffer = gst_buffer_ref (gst_buffer_list_get (buffer_list, 0));
-          gst_buffer_list_unref (buffer_list);
-          buffer_list = NULL;
-        }
+      if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS) {
+          if (bs->registration_id == DRF_ID_OPUS) {
+              buffer_list = parse_opus_access_unit (stream);
+              if (!buffer_list) {
+                res = GST_FLOW_ERROR;
+                goto beach;
+              }
+              if (gst_buffer_list_length (buffer_list) == 1) {
+                  buffer = gst_buffer_ref (gst_buffer_list_get (buffer_list, 0));
+                  gst_buffer_list_unref (buffer_list);
+                  buffer_list = NULL;
+              }
+          } 
+          else {
+                   buffer = gst_buffer_new_wrapped (stream->data, stream->current_size);
+          }
       } else if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_VIDEO_JP2K) {
         buffer = parse_jp2k_access_unit (stream);
         if (!buffer) {
@@ -3409,19 +3419,21 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream,
       goto beach;
     }
   } else {
-    if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS &&
-        bs->registration_id == DRF_ID_OPUS) {
-      buffer_list = parse_opus_access_unit (stream);
-      if (!buffer_list) {
-        res = GST_FLOW_ERROR;
-        goto beach;
-      }
-
-      if (gst_buffer_list_length (buffer_list) == 1) {
-        buffer = gst_buffer_ref (gst_buffer_list_get (buffer_list, 0));
-        gst_buffer_list_unref (buffer_list);
-        buffer_list = NULL;
-      }
+     if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_PRIVATE_PES_PACKETS) {
+       if (bs->registration_id == DRF_ID_OPUS) {
+         buffer_list = parse_opus_access_unit (stream);
+         if (!buffer_list) {
+            res = GST_FLOW_ERROR;
+            goto beach;
+       }
+       if (gst_buffer_list_length (buffer_list) == 1) {
+          buffer = gst_buffer_ref (gst_buffer_list_get (buffer_list, 0));
+          gst_buffer_list_unref (buffer_list);
+          buffer_list = NULL;
+       }
+       } else {
+             buffer = gst_buffer_new_wrapped (stream->data, stream->current_size);
+       }
     } else if (bs->stream_type == GST_MPEGTS_STREAM_TYPE_VIDEO_JP2K) {
       buffer = parse_jp2k_access_unit (stream);
       if (!buffer) {
