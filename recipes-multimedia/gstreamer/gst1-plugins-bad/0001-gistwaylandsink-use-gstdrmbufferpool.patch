diff --git a/ext/wayland/gstwaylandsink.c b/ext/wayland/gstwaylandsink.c
index 0761304..291ba18 100644
--- a/ext/wayland/gstwaylandsink.c
+++ b/ext/wayland/gstwaylandsink.c
@@ -50,6 +50,7 @@
 
 #include <gst/wayland/wayland.h>
 #include <gst/video/videooverlay.h>
+#include <gst/gstdrmbufferpool.h>
 
 /* signals */
 enum
@@ -63,7 +64,9 @@ enum
 {
   PROP_0,
   PROP_DISPLAY,
-  PROP_FULLSCREEN
+  PROP_FULLSCREEN,
+  PROP_ALLOCATION,
+  PROP_SECURE,
 };
 
 GST_DEBUG_CATEGORY (gstwayland_debug);
@@ -212,6 +215,16 @@ gst_wayland_sink_class_init (GstWaylandSinkClass * klass)
           "Whether the surface should be made fullscreen ", FALSE,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (gobject_class, PROP_ALLOCATION,
+      g_param_spec_boolean ("use-drm", "Wayland Allocation name", "Wayland "
+          "Use DRM based memory for allocation",
+          FALSE, G_PARAM_WRITABLE));
+
+  g_object_class_install_property (gobject_class, PROP_SECURE,
+      g_param_spec_boolean ("secure", "Wayland Allocation Secure", "Wayland "
+          "Use Secure DRM based memory for allocation",
+          FALSE, G_PARAM_WRITABLE));
+
   gst_type_mark_as_plugin_api (GST_TYPE_WAYLAND_VIDEO, 0);
 }
 
@@ -274,6 +287,16 @@ gst_wayland_sink_set_property (GObject * object,
       gst_wayland_sink_set_fullscreen (sink, g_value_get_boolean (value));
       GST_OBJECT_UNLOCK (sink);
       break;
+    case PROP_ALLOCATION:
+      GST_OBJECT_LOCK (sink);
+      sink->use_drm = g_value_get_boolean (value);
+      GST_OBJECT_UNLOCK (sink);
+      break;
+    case PROP_SECURE:
+      GST_OBJECT_LOCK (sink);
+      sink->secure = g_value_get_boolean (value);
+      GST_OBJECT_UNLOCK (sink);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
       break;
@@ -621,16 +644,22 @@ gst_wayland_sink_propose_allocation (GstBaseSink * bsink, GstQuery * query)
   gst_query_parse_allocation (query, &caps, &need_pool);
 
   if (need_pool)
-    pool = gst_wayland_create_pool (sink, caps);
+    if (sink->use_drm)
+      pool = gst_drm_bufferpool_new (sink->secure, GST_DRM_BUFFERPOOL_TYPE_VIDEO_PLANE);
+    else
+      pool = gst_wayland_create_pool (sink, caps);
 
   gst_query_add_allocation_pool (query, pool, sink->video_info.size, 2, 0);
   if (pool)
     g_object_unref (pool);
 
-  alloc = gst_wl_shm_allocator_get ();
-  gst_query_add_allocation_param (query, alloc, NULL);
+  if (!sink->use_drm) {
+    alloc = gst_wl_shm_allocator_get ();
+    gst_query_add_allocation_param (query, alloc, NULL);
+    g_object_unref (alloc);
+  }
+
   gst_query_add_allocation_meta (query, GST_VIDEO_META_API_TYPE, NULL);
-  g_object_unref (alloc);
 
   return TRUE;
 }
diff --git a/ext/wayland/gstwaylandsink.h b/ext/wayland/gstwaylandsink.h
index 7aabb6f..76350a6 100644
--- a/ext/wayland/gstwaylandsink.h
+++ b/ext/wayland/gstwaylandsink.h
@@ -63,6 +63,8 @@ struct _GstWaylandSink
   gboolean fullscreen;
 
   gchar *display_name;
+  gboolean use_drm;
+  gboolean secure;
 
   gboolean redraw_pending;
   GMutex render_lock;
diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index a3ffb70..f41ea7e 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -9,6 +9,7 @@ wl_sources = [
 ]
 
 libdrm_dep = dependency('libdrm', version: '>= 2.4.55', required:get_option('wayland'))
+gstdrmbufferpool_dep = dependency('gstdrmbufferpool')
 
 if use_wayland
     protocols_datadir = wl_protocol_dep.get_variable('pkgdatadir')
@@ -42,7 +43,7 @@ if use_wayland
         c_args : gst_plugins_bad_args + ['-DGST_USE_UNSTABLE_API'],
         include_directories : [configinc],
         dependencies : [gst_dep, gstvideo_dep, gstwayland_dep, gstallocators_dep,
-                        wl_client_dep, wl_protocol_dep, libdrm_dep],
+                        wl_client_dep, wl_protocol_dep, libdrm_dep, gstdrmbufferpool_dep],
         install : true,
         install_dir : plugins_install_dir,
     )
