diff --git a/gst/mpegtsdemux/mpegtspacketizer.c b/gst/mpegtsdemux/mpegtspacketizer.c
index 9960a29..263f90f 100644
--- a/gst/mpegtsdemux/mpegtspacketizer.c
+++ b/gst/mpegtsdemux/mpegtspacketizer.c
@@ -276,6 +276,8 @@ mpegts_packetizer_init (MpegTSPacketizer2 * packetizer)
   packetizer->last_pts = GST_CLOCK_TIME_NONE;
   packetizer->last_dts = GST_CLOCK_TIME_NONE;
   packetizer->extra_shift = 0;
+  //aml modify
+  packetizer->protect_pts = TRUE;
 }
 
 static void
@@ -2377,8 +2379,9 @@ mpegts_packetizer_pts_to_ts (MpegTSPacketizer2 * packetizer,
       GST_WARNING ("No groups, can't calculate timestamp");
   } else {
     //AML MOD FLOW
-    GST_WARNING ("Not enough information to calculate proper timestamp use origin pts %" GST_TIME_FORMAT, GST_TIME_ARGS (pts));
-    res = pts;
+    GST_WARNING ("%d, Not enough information to calculate proper timestamp use origin pts %" GST_TIME_FORMAT, packetizer->protect_pts, GST_TIME_ARGS (pts));
+    if(packetizer->protect_pts)
+        res = pts;
   }
 
   PACKETIZER_GROUP_UNLOCK (packetizer);
diff --git a/gst/mpegtsdemux/mpegtspacketizer.h b/gst/mpegtsdemux/mpegtspacketizer.h
index f8ee1b9..04e673a 100644
--- a/gst/mpegtsdemux/mpegtspacketizer.h
+++ b/gst/mpegtsdemux/mpegtspacketizer.h
@@ -291,6 +291,9 @@ struct _MpegTSPacketizer2 {
   /* Extra time offset to handle values before initial PCR.
    * This will be added to all converted timestamps */
   GstClockTime extra_shift;
+
+  //aml modify
+  gboolean protect_pts;
 };
 
 struct _MpegTSPacketizer2Class {
diff --git a/gst/mpegtsdemux/tsdemux.c b/gst/mpegtsdemux/tsdemux.c
index ea36de7..35317e3 100644
--- a/gst/mpegtsdemux/tsdemux.c
+++ b/gst/mpegtsdemux/tsdemux.c
@@ -307,6 +307,7 @@ enum
   PROP_CHECK_PCR_ILLEGAL,
   PROP_LATENCY,
   PROP_SEND_SCTE35_EVENTS,
+  PROP_PROTECT_PTS,
   /* FILL ME */
 };
 
@@ -445,6 +446,11 @@ gst_ts_demux_class_init (GstTSDemuxClass * klass)
           G_MAXINT, DEFAULT_LATENCY,
           G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
 
+  g_object_class_install_property (gobject_class, PROP_PROTECT_PTS,
+      g_param_spec_boolean ("protect-pts", "protect pts",
+          "if cal pts error, protect pts", FALSE,
+          G_PARAM_READWRITE | G_PARAM_STATIC_STRINGS));
+
   element_class = GST_ELEMENT_CLASS (klass);
   gst_element_class_add_pad_template (element_class,
       gst_static_pad_template_get (&video_template));
@@ -553,6 +559,9 @@ gst_ts_demux_set_property (GObject * object, guint prop_id,
     case PROP_LATENCY:
       demux->latency = g_value_get_int (value);
       break;
+    case PROP_PROTECT_PTS:
+      MPEG_TS_BASE_PACKETIZER (demux)->protect_pts = g_value_get_boolean (value);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
@@ -577,6 +586,9 @@ gst_ts_demux_get_property (GObject * object, guint prop_id,
     case PROP_LATENCY:
       g_value_set_int (value, demux->latency);
       break;
+    case PROP_PROTECT_PTS:
+      g_value_set_boolean (value, MPEG_TS_BASE_PACKETIZER (demux)->protect_pts);
+      break;
     default:
       G_OBJECT_WARN_INVALID_PROPERTY_ID (object, prop_id, pspec);
   }
