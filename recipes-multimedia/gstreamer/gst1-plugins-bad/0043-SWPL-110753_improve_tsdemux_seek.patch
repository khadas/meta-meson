diff --git a/gst/mpegtsdemux/tsdemux.c b/gst/mpegtsdemux/tsdemux.c
index 27b7724..cc1b24d 100644
--- a/gst/mpegtsdemux/tsdemux.c
+++ b/gst/mpegtsdemux/tsdemux.c
@@ -516,6 +516,7 @@ gst_ts_demux_reset (MpegTSBase * base)
   demux->group_id = G_MAXUINT;
 
   demux->last_seek_offset = -1;
+  demux->pre_seek_start = -1;
   demux->program_generation = 0;
 
   demux->mpeg_pts_offset = 0;
@@ -962,6 +963,7 @@ gst_ts_demux_do_seek (MpegTSBase * base, GstEvent * event)
   GstSeekType start_type, stop_type;
   gint64 start, stop;
   guint64 start_offset;
+  guint64 request_offset;
   gboolean update = FALSE;
   GstSegment seeksegment;
 
@@ -1017,6 +1019,9 @@ gst_ts_demux_do_seek (MpegTSBase * base, GstEvent * event)
     start_offset =
         mpegts_packetizer_ts_to_offset (base->packetizer, target,
         demux->program->pcr_pid);
+    request_offset =
+        mpegts_packetizer_ts_to_offset (base->packetizer, MAX (0,
+            start), demux->program->pcr_pid);
     if (G_UNLIKELY (start_offset == -1)) {
       GST_WARNING_OBJECT (demux,
           "Couldn't convert start position to an offset");
@@ -1026,6 +1031,7 @@ gst_ts_demux_do_seek (MpegTSBase * base, GstEvent * event)
 
     base->seek_offset = start_offset;
     demux->last_seek_offset = base->seek_offset;
+    demux->pre_seek_start = request_offset;
     /* Reset segment if we're not doing an accurate seek */
     demux->reset_segment = (!(flags & GST_SEEK_FLAG_ACCURATE));
 
@@ -3590,10 +3596,28 @@ gst_ts_demux_push_pending_data (GstTSDemux * demux, TSDemuxStream * stream,
     } else {
       GList *tmp;
       GST_DEBUG_OBJECT (stream->pad, "Rewinding after keyframe seek failure");
-      base->seek_offset = demux->last_seek_offset - 200 * base->packetsize;
-      if (demux->last_seek_offset < 200 * base->packetsize)
-        base->seek_offset = 0;
-      demux->last_seek_offset = base->seek_offset;
+      GST_DEBUG_OBJECT (stream->pad,
+          "cur read offset=%lld, last_seek_offset=%lld, pre_seek_start=%lld",
+          base->seek_offset, demux->last_seek_offset, demux->pre_seek_start);
+
+      if (base->seek_offset >= demux->pre_seek_start)
+      {
+        demux->pre_seek_start = demux->last_seek_offset;
+
+        base->seek_offset = demux->last_seek_offset - 1000 * base->packetsize;
+
+        if (demux->last_seek_offset < 1000 * base->packetsize)
+          base->seek_offset = 0;
+        demux->last_seek_offset = base->seek_offset;
+
+        GST_DEBUG_OBJECT (stream->pad,
+          "new seek_offset=%lld, last_seek_offset=%lld, pre_seek_start=%lld",
+          base->seek_offset, demux->last_seek_offset, demux->pre_seek_start);
+      }
+      else
+      {
+        GST_DEBUG_OBJECT (stream->pad, "continue read from %lld", base->seek_offset);
+      }
       mpegts_packetizer_flush (base->packetizer, FALSE);
 
       /* Reset all streams accordingly */
diff --git a/gst/mpegtsdemux/tsdemux.h b/gst/mpegtsdemux/tsdemux.h
index e347cb1..c3784c5 100644
--- a/gst/mpegtsdemux/tsdemux.h
+++ b/gst/mpegtsdemux/tsdemux.h
@@ -105,6 +105,7 @@ struct _GstTSDemux
 
   /* Used when seeking for a keyframe to go backward in the stream */
   guint64 last_seek_offset;
+  guint64 pre_seek_start;
 
   /* The current difference between PES PTSs and our output running times,
    * in the MPEG time domain. This is used for potentially updating
