From d3db69367b764e755a49eea9dc1c165e9debb16c Mon Sep 17 00:00:00 2001
From: lingjie li <lingjie.li@amlogic.com>
Date: Mon, 8 Feb 2021 20:26:59 +0800
Subject: [PATCH 2/2] gst1-plugin-bad: use weston weston_direct_display_v1 for
 dri video dma [1/1]

%% original patch: 0002-gst1-plugin-bad-use-weston-weston_direct_display_v1-.patch
---
 ext/wayland/meson.build          | 19 +++++++++++++++++++
 ext/wayland/wldisplay.c          |  3 +++
 ext/wayland/wldisplay.h          |  2 ++
 ext/wayland/wllinuxdmabuf.c      |  4 ++++
 gst-libs/gst/wayland/meson.build |  1 +
 5 files changed, 29 insertions(+)

diff --git a/ext/wayland/meson.build b/ext/wayland/meson.build
index 71757f6..dad47d5 100644
--- a/ext/wayland/meson.build
+++ b/ext/wayland/meson.build
@@ -38,6 +38,25 @@ if use_wayland
           command : [wl_scanner, 'client-header', '@INPUT@', '@OUTPUT@'])]
     endforeach
 
+    weston_protocol_defs = [
+        ['/weston-direct-display.xml', 'weston-direct-display-protocol.c', 'weston-direct-display-client-protocol.h'],
+    ]
+
+    protocols_datadir = weston_protocol_dep.get_pkgconfig_variable('pkgdatadir')
+    foreach protodef: weston_protocol_defs
+        xmlfile = protocols_datadir + protodef.get(0)
+
+        protocols_files += [custom_target(protodef.get(1),
+          output : protodef.get(1),
+          input : xmlfile,
+          command : [wl_scanner, 'code', '@INPUT@', '@OUTPUT@'])]
+
+        protocols_files += [custom_target(protodef.get(2),
+          output : protodef.get(2),
+          input : xmlfile,
+          command : [wl_scanner, 'client-header', '@INPUT@', '@OUTPUT@'])]
+    endforeach
+
     gstwaylandsink = library('gstwaylandsink',
         wl_sources + protocols_files,
         c_args : gst_plugins_bad_args + ['-DGST_USE_UNSTABLE_API'],
diff --git a/ext/wayland/wldisplay.c b/ext/wayland/wldisplay.c
index 9400095..088093b 100644
--- a/ext/wayland/wldisplay.c
+++ b/ext/wayland/wldisplay.c
@@ -231,6 +231,9 @@ registry_handle_global (void *data, struct wl_registry *registry,
     self->dmabuf =
         wl_registry_bind (registry, id, &zwp_linux_dmabuf_v1_interface, 1);
     zwp_linux_dmabuf_v1_add_listener (self->dmabuf, &dmabuf_listener, self);
+  } else if (g_strcmp0 (interface, "weston_direct_display_v1") == 0) {
+    self->direct_display =
+        wl_registry_bind (registry, id, &weston_direct_display_v1_interface, 1);
   }
 }
 
diff --git a/ext/wayland/wldisplay.h b/ext/wayland/wldisplay.h
index 4ecc0d6..c31ed72 100644
--- a/ext/wayland/wldisplay.h
+++ b/ext/wayland/wldisplay.h
@@ -28,6 +28,7 @@
 #include "viewporter-client-protocol.h"
 #include "linux-dmabuf-unstable-v1-client-protocol.h"
 #include "fullscreen-shell-unstable-v1-client-protocol.h"
+#include "weston-direct-display-client-protocol.h"
 
 G_BEGIN_DECLS
 
@@ -60,6 +61,7 @@ struct _GstWlDisplay
   struct wl_shm *shm;
   struct wp_viewporter *viewporter;
   struct zwp_linux_dmabuf_v1 *dmabuf;
+  struct weston_direct_display_v1 *direct_display;
   GArray *shm_formats;
   GArray *dmabuf_formats;
 
diff --git a/ext/wayland/wllinuxdmabuf.c b/ext/wayland/wllinuxdmabuf.c
index 96487d1..af76208 100644
--- a/ext/wayland/wllinuxdmabuf.c
+++ b/ext/wayland/wllinuxdmabuf.c
@@ -101,6 +101,10 @@ gst_wl_linux_dmabuf_construct_wl_buffer (GstBuffer * buf,
   /* Creation and configuration of planes  */
   params = zwp_linux_dmabuf_v1_create_params (display->dmabuf);
 
+  if (display->direct_display) {
+      weston_direct_display_v1_enable(display->direct_display, params);
+  }
+
   for (i = 0; i < nplanes; i++) {
     guint offset, stride, mem_idx, length;
     gsize skip;
diff --git a/gst-libs/gst/wayland/meson.build b/gst-libs/gst/wayland/meson.build
index b1ede41..6c0bb55 100644
--- a/gst-libs/gst/wayland/meson.build
+++ b/gst-libs/gst/wayland/meson.build
@@ -2,6 +2,7 @@ wl_req = '>= 1.15'
 wl_client_dep = dependency('wayland-client', version: wl_req, required: get_option('wayland'))
 libdrm_dep = dependency('libdrm', version: '>= 2.4.55', required: get_option('wayland'))
 wl_protocol_dep = dependency('wayland-protocols', version: wl_req, required: get_option('wayland'))
+weston_protocol_dep = dependency('libweston-10-protocols', version: '>= 10.0.0', required: get_option('wayland'))
 wl_scanner = find_program('wayland-scanner', required: get_option('wayland'))
 # Also used in ext/wayland
 use_wayland = wl_protocol_dep.found() and wl_client_dep.found() and wl_scanner.found() and libdrm_dep.found()
-- 
2.7.4

