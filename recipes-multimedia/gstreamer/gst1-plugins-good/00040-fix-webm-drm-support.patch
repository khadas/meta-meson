diff --git a/gst/matroska/matroska-demux.c b/gst/matroska/matroska-demux.c
index f1fc616..d489a5e 100755
--- a/gst/matroska/matroska-demux.c
+++ b/gst/matroska/matroska-demux.c
@@ -302,7 +302,7 @@ gst_matroska_demux_init (GstMatroskaDemux * demux)
   GST_OBJECT_FLAG_SET (demux, GST_ELEMENT_FLAG_INDEXABLE);
 
   demux->flowcombiner = gst_flow_combiner_new ();
-
+  g_queue_init(&demux->pending_protection_event_queue);
   /* finish off */
   gst_matroska_demux_reset (GST_ELEMENT (demux));
 }
@@ -378,6 +378,9 @@ gst_matroska_demux_reset (GstElement * element)
   demux->deferred_seek_event = NULL;
   demux->deferred_seek_pad = NULL;
 
+  g_queue_foreach (&demux->pending_protection_event_queue, (GFunc) gst_event_unref,
+    NULL);
+  g_queue_clear (&demux->pending_protection_event_queue);
   gst_flow_combiner_clear (demux->flowcombiner);
 }
 
@@ -693,6 +696,15 @@ beach:
   return ret;
 }
 
+void 
+gst_matroska_demux_copy_pending_protection_event(gpointer       data,
+                                                 gpointer       user_data)
+{
+  GstEvent *event = (GstEvent *)data;
+  GstMatroskaTrackContext *context = (GstMatroskaTrackContext *)user_data;
+  g_queue_push_tail (&context->protection_event_queue, gst_event_ref(event));
+}
+
 static GstFlowReturn
 gst_matroska_demux_parse_stream (GstMatroskaDemux * demux, GstEbmlRead * ebml,
     GstMatroskaTrackContext ** dest_context)
@@ -736,7 +748,7 @@ gst_matroska_demux_parse_stream (GstMatroskaDemux * demux, GstEbmlRead * ebml,
   context->tags = gst_tag_list_new_empty ();
   g_queue_init (&context->protection_event_queue);
   context->protection_info = NULL;
-
+  g_queue_foreach(&demux->pending_protection_event_queue, gst_matroska_demux_copy_pending_protection_event, context);
   GST_DEBUG_OBJECT (demux, "Parsing a TrackEntry (%d tracks parsed so far)",
       demux->common.num_streams);
 
@@ -6200,6 +6212,11 @@ gst_matroska_demux_handle_sink_event (GstPad * pad, GstObject * parent,
       "have event type %s: %p on sink pad", GST_EVENT_TYPE_NAME (event), event);
 
   switch (GST_EVENT_TYPE (event)) {
+    case GST_EVENT_PROTECTION:
+    {
+      g_queue_push_tail (&demux->pending_protection_event_queue, event);
+      break;
+    }
     case GST_EVENT_SEGMENT:
     {
       const GstSegment *segment;
diff --git a/gst/matroska/matroska-demux.h b/gst/matroska/matroska-demux.h
index a0a2794..5a2b986 100755
--- a/gst/matroska/matroska-demux.h
+++ b/gst/matroska/matroska-demux.h
@@ -129,6 +129,10 @@ typedef struct _GstMatroskaDemux {
 
   /* Cached upstream length (default G_MAXUINT64) */
   guint64	           cached_length;
+
+  /* Pending protection event need pass to downstream */
+  GQueue                   pending_protection_event_queue;
+
 } GstMatroskaDemux;
 
 typedef struct _GstMatroskaDemuxClass {
diff --git a/gst/matroska/matroska-read-common.c b/gst/matroska/matroska-read-common.c
index 6fadbba..c5d715d 100755
--- a/gst/matroska/matroska-read-common.c
+++ b/gst/matroska/matroska-read-common.c
@@ -448,7 +448,7 @@ gst_matroska_parse_protection_meta (gpointer * data_out, gsize * size_out,
 
   /* Unencrypted buffer */
   if (!(signal_byte & GST_MATROSKA_BLOCK_ENCRYPTED)) {
-    return TRUE;
+    goto beach;
   }
 
   /* Encrypted buffer */
@@ -591,7 +591,7 @@ gst_matroska_parse_protection_meta (gpointer * data_out, gsize * size_out,
   } else {
     gst_structure_set (info_protect, "subsample_count", G_TYPE_UINT, 0, NULL);
   }
-
+beach:
   gst_byte_reader_get_data (&reader, 0, (const guint8 **) data_out);
   *size_out = gst_byte_reader_get_remaining (&reader);
   return TRUE;
