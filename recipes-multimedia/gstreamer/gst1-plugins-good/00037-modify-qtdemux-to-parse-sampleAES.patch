diff --git a/gst/isomp4/fourcc.h b/gst/isomp4/fourcc.h
index 7b837b3..9a0be6b 100755
--- a/gst/isomp4/fourcc.h
+++ b/gst/isomp4/fourcc.h
@@ -414,6 +414,7 @@ G_BEGIN_DECLS
 #define FOURCC_tenc     GST_MAKE_FOURCC('t','e','n','c')
 #define FOURCC_cenc     GST_MAKE_FOURCC('c','e','n','c')
 #define FOURCC_cbcs     GST_MAKE_FOURCC('c','b','c','s')
+#define FOURCC_cens     GST_MAKE_FOURCC('c','e','n','s')
 
 /* Audible AAX encrypted audio */
 #define FOURCC_aavd     GST_MAKE_FOURCC('a','a','v','d')
diff --git a/gst/isomp4/qtdemux.c b/gst/isomp4/qtdemux.c
index 638de19..dacce74 100755
--- a/gst/isomp4/qtdemux.c
+++ b/gst/isomp4/qtdemux.c
@@ -2561,7 +2561,8 @@ gst_qtdemux_stream_clear (QtDemuxStream * stream)
   stream->protected = FALSE;
   if (stream->protection_scheme_info) {
     if (stream->protection_scheme_type == FOURCC_cenc
-        || stream->protection_scheme_type == FOURCC_cbcs) {
+        || stream->protection_scheme_type == FOURCC_cbcs
+        || stream->protection_scheme_type == FOURCC_cens) {
       QtDemuxCencSampleSetInfo *info =
           (QtDemuxCencSampleSetInfo *) stream->protection_scheme_info;
       if (info->default_properties)
@@ -2717,7 +2718,7 @@ qtdemux_update_default_sample_cenc_settings (GstQTDemux * qtdemux,
       "encrypted", G_TYPE_BOOLEAN, (is_encrypted == 1),
       "kid", GST_TYPE_BUFFER, kid_buf, NULL);
   GST_DEBUG_OBJECT (qtdemux, "default sample properties: "
-      "is_encrypted=%u, iv_size=%u", is_encrypted, iv_size);
+      "is_encrypted=%u, iv_size=%u constant_iv_size=%u", is_encrypted, iv_size, constant_iv_size);
   gst_buffer_unref (kid_buf);
   if (protection_scheme_type == FOURCC_cbcs) {
     if (crypt_byte_block != 0 || skip_byte_block != 0) {
@@ -3918,6 +3919,7 @@ qtdemux_parse_cenc_aux_info (GstQTDemux * qtdemux, QtDemuxStream * stream,
       return FALSE;
     }
     size = info_sizes[i];
+    GST_DEBUG_OBJECT (qtdemux, "size %u iv_size %u", size, iv_size);
     if (size > iv_size) {
       if (!gst_byte_reader_get_uint16_be (br, &n_subsamples)
           || !(n_subsamples > 0)) {
@@ -4072,7 +4074,7 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
       guint32 info_type_parameter = 0;
 
       g_free (qtdemux->cenc_aux_info_sizes);
-
+      GST_DEBUG_OBJECT (qtdemux, "parse saiz_node");
       qtdemux->cenc_aux_info_sizes =
           qtdemux_parse_saiz (qtdemux, stream, &saiz_data,
           &qtdemux->cenc_aux_sample_count);
@@ -4099,13 +4101,14 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
       }
       if (base_offset > -1 && base_offset > qtdemux->moof_offset)
         offset += (guint64) (base_offset - qtdemux->moof_offset);
-      if ((info_type == FOURCC_cenc || info_type == FOURCC_cbcs)
+      if ((info_type == FOURCC_cenc || info_type == FOURCC_cbcs || info_type == FOURCC_cens)
           && info_type_parameter == 0U) {
         GstByteReader br;
         if (offset > length) {
           GST_DEBUG_OBJECT (qtdemux, "cenc auxiliary info stored out of moof");
           qtdemux->cenc_aux_info_offset = offset;
         } else {
+          GST_DEBUG_OBJECT (qtdemux, "parsing cenc auxiliary info");
           gst_byte_reader_init (&br, buffer + offset, length - offset);
           if (!qtdemux_parse_cenc_aux_info (qtdemux, stream, &br,
                   qtdemux->cenc_aux_info_sizes,
@@ -4117,6 +4120,8 @@ qtdemux_parse_moof (GstQTDemux * qtdemux, const guint8 * buffer, guint length,
           }
         }
       }
+    } else {
+      GST_WARNING_OBJECT (qtdemux, "no saiz_node, may cbc1 audio");
     }
 
     tfdt_node =
@@ -5917,12 +5922,14 @@ gst_qtdemux_push_buffer (GstQTDemux * qtdemux, QtDemuxStream * stream,
   }
 
   if (stream->protected && (stream->protection_scheme_type == FOURCC_cenc
-          || stream->protection_scheme_type == FOURCC_cbcs)) {
+      || stream->protection_scheme_type == FOURCC_cbcs
+      || stream->protection_scheme_type == FOURCC_cens)) {
     GstStructure *crypto_info;
     QtDemuxCencSampleSetInfo *info =
         (QtDemuxCencSampleSetInfo *) stream->protection_scheme_info;
     gint index;
     GstEvent *event;
+    GstProtectionMeta *meta = NULL;
 
     while ((event = g_queue_pop_head (&stream->protection_scheme_event_queue))) {
       GST_TRACE_OBJECT (stream->pad, "pushing protection event: %"
@@ -5931,9 +5938,39 @@ gst_qtdemux_push_buffer (GstQTDemux * qtdemux, QtDemuxStream * stream,
     }
 
     if (info->crypto_info == NULL) {
+      /* cbc1 audio may has no saiz node, need update crypto info from default properties */
       if (stream->protection_scheme_type == FOURCC_cbcs) {
+        guint crypt_byte_block = 0;
+        guint skip_byte_block = 0;
+        guint iv_size = 0;
+        guint constant_iv_size = 0;
+
         crypto_info = qtdemux_get_cenc_sample_properties (qtdemux, stream, 0);
-        if (!crypto_info || !gst_buffer_add_protection_meta (buf, crypto_info)) {
+        gst_structure_get (crypto_info,
+            "crypt_byte_block", G_TYPE_UINT, &crypt_byte_block,
+            "skip_byte_block", G_TYPE_UINT, &skip_byte_block,
+            "iv_size", G_TYPE_UINT, &iv_size,
+            NULL);
+        if (iv_size == 0) {
+          if (!gst_structure_get_uint (crypto_info, "constant_iv_size", &constant_iv_size)) {
+            GST_ERROR_OBJECT (qtdemux, "failed to get iv_size");
+          } else {
+            gst_structure_set (crypto_info, "iv_size", G_TYPE_UINT, constant_iv_size, NULL);
+          }
+        }
+
+        meta = gst_buffer_get_protection_meta(buf);
+        if (meta) {
+          GST_DEBUG_OBJECT (qtdemux, "protection metadata name %s", gst_structure_get_name(meta->info));
+          gst_structure_set (meta->info,
+              "crypt_byte_block", G_TYPE_UINT, crypt_byte_block,
+              "skip_byte_block", G_TYPE_UINT, skip_byte_block,
+              NULL);
+        } else {
+          GST_INFO_OBJECT (qtdemux, "no cbcs protection metadata");
+        }
+
+        if (!meta && (!crypto_info || !gst_buffer_add_protection_meta (buf, crypto_info))) {
           GST_ERROR_OBJECT (qtdemux,
               "failed to attach cbcs metadata to buffer");
           qtdemux_gst_structure_free (crypto_info);
@@ -5954,7 +5991,34 @@ gst_qtdemux_push_buffer (GstQTDemux * qtdemux, QtDemuxStream * stream,
         g_ptr_array_index (info->crypto_info, index) = NULL;
         GST_LOG_OBJECT (qtdemux, "attaching cenc metadata [%u/%u]", index,
             info->crypto_info->len);
-        if (!crypto_info || !gst_buffer_add_protection_meta (buf, crypto_info))
+
+        if (stream->protection_scheme_type == FOURCC_cbcs) {
+          guint subsample_count = 0;
+          GstBuffer *subsamples = NULL;
+          guint crypt_byte_block = 0;
+          guint skip_byte_block = 0;
+
+          gst_structure_get (crypto_info,
+              "subsample_count", G_TYPE_UINT, &subsample_count,
+              "subsamples", GST_TYPE_BUFFER, &subsamples,
+              "crypt_byte_block", G_TYPE_UINT, &crypt_byte_block,
+              "skip_byte_block", G_TYPE_UINT, &skip_byte_block,
+              NULL);
+          meta = gst_buffer_get_protection_meta(buf);
+          if (meta) {
+            GST_DEBUG_OBJECT (qtdemux, "protection metadata name %s", gst_structure_get_name(meta->info));
+            gst_structure_set (meta->info,
+                "subsample_count", G_TYPE_UINT, subsample_count,
+                "subsamples", GST_TYPE_BUFFER, subsamples,
+                "crypt_byte_block", G_TYPE_UINT, crypt_byte_block,
+                "skip_byte_block", G_TYPE_UINT, skip_byte_block,
+                NULL);
+          } else {
+            GST_INFO_OBJECT (qtdemux, "no origin cbcs protection metadata");
+          }
+        }
+
+        if (!meta && (!crypto_info || !gst_buffer_add_protection_meta (buf, crypto_info)))
           GST_ERROR_OBJECT (qtdemux,
               "failed to attach cenc metadata to buffer");
       } else {
@@ -6317,7 +6381,8 @@ gst_qtdemux_do_fragmented_seek (GstQTDemux * qtdemux)
     if (stream->protection_scheme_info) {
       /* Clear out any old cenc crypto info entries as we'll move to a new moof */
       if (stream->protection_scheme_type == FOURCC_cenc
-          || stream->protection_scheme_type == FOURCC_cbcs) {
+          || stream->protection_scheme_type == FOURCC_cbcs
+          || stream->protection_scheme_type == FOURCC_cens) {
         QtDemuxCencSampleSetInfo *info =
             (QtDemuxCencSampleSetInfo *) stream->protection_scheme_info;
         if (info->crypto_info) {
@@ -8574,7 +8639,8 @@ gst_qtdemux_configure_protected_caps (GstQTDemux * qtdemux,
   }
 
   if (stream->protection_scheme_type != FOURCC_cenc
-      && stream->protection_scheme_type != FOURCC_cbcs) {
+      && stream->protection_scheme_type != FOURCC_cbcs
+      && stream->protection_scheme_type != FOURCC_cens) {
     GST_ERROR_OBJECT (qtdemux,
         "unsupported protection scheme: %" GST_FOURCC_FORMAT,
         GST_FOURCC_ARGS (stream->protection_scheme_type));
@@ -10707,7 +10773,8 @@ qtdemux_parse_protection_scheme_info (GstQTDemux * qtdemux,
   sinf = qtdemux_tree_get_child_by_type (container, FOURCC_sinf);
   if (G_UNLIKELY (!sinf)) {
     if (stream->protection_scheme_type == FOURCC_cenc
-        || stream->protection_scheme_type == FOURCC_cbcs) {
+        || stream->protection_scheme_type == FOURCC_cbcs
+        || stream->protection_scheme_type == FOURCC_cens) {
       GST_ERROR_OBJECT (qtdemux, "sinf box does not contain schi box, which is "
           "mandatory for Common Encryption");
       return FALSE;
@@ -10747,7 +10814,8 @@ qtdemux_parse_protection_scheme_info (GstQTDemux * qtdemux,
   }
   if (stream->protection_scheme_type != FOURCC_cenc &&
       stream->protection_scheme_type != FOURCC_piff &&
-      stream->protection_scheme_type != FOURCC_cbcs) {
+      stream->protection_scheme_type != FOURCC_cbcs &&
+      stream->protection_scheme_type != FOURCC_cens) {
     GST_ERROR_OBJECT (qtdemux,
         "Invalid protection_scheme_type: %" GST_FOURCC_FORMAT,
         GST_FOURCC_ARGS (stream->protection_scheme_type));
@@ -10761,7 +10829,8 @@ qtdemux_parse_protection_scheme_info (GstQTDemux * qtdemux,
   info = (QtDemuxCencSampleSetInfo *) stream->protection_scheme_info;
 
   if (stream->protection_scheme_type == FOURCC_cenc
-      || stream->protection_scheme_type == FOURCC_cbcs) {
+        || stream->protection_scheme_type == FOURCC_cbcs
+        || stream->protection_scheme_type == FOURCC_cens) {
     guint8 is_encrypted;
     guint8 iv_size;
     guint8 constant_iv_size = 0;
