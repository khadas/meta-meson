diff --git a/gst-libs/gst/app/gstappsrc.c b/gst-libs/gst/app/gstappsrc.c
index 668438c..3ae3d9b 100644
--- a/gst-libs/gst/app/gstappsrc.c
+++ b/gst-libs/gst/app/gstappsrc.c
@@ -172,6 +172,7 @@ struct _GstAppSrcPrivate
 
   gboolean flushing;
   gboolean started;
+  gboolean reset_pos;
   gboolean is_eos;
   guint64 queued_bytes, queued_buffers;
   /* Used to calculate the current time level */
@@ -757,6 +758,7 @@ gst_app_src_init (GstAppSrc * appsrc)
   priv->max_latency = DEFAULT_PROP_MAX_LATENCY;
   priv->emit_signals = DEFAULT_PROP_EMIT_SIGNALS;
   priv->min_percent = DEFAULT_PROP_MIN_PERCENT;
+  priv->reset_pos = FALSE;
   priv->handle_segment_change = DEFAULT_PROP_HANDLE_SEGMENT_CHANGE;
   priv->leaky_type = DEFAULT_PROP_LEAKY_TYPE;
 
@@ -1016,12 +1018,18 @@ gst_app_src_send_event (GstElement * element, GstEvent * event)
 {
   GstAppSrc *appsrc = GST_APP_SRC_CAST (element);
   GstAppSrcPrivate *priv = appsrc->priv;
+  gboolean reset_time;
 
   switch (GST_EVENT_TYPE (event)) {
     case GST_EVENT_FLUSH_STOP:
+      gst_event_parse_flush_stop (event, &reset_time);
       g_mutex_lock (&priv->mutex);
       gst_app_src_flush_queued (appsrc, TRUE);
+      if (reset_time)
+          priv->reset_pos = TRUE;
       g_mutex_unlock (&priv->mutex);
+      GST_DEBUG_OBJECT (appsrc, " Receive flush stop reset %u",
+          priv->reset_pos);
       break;
     default:
       if (GST_EVENT_IS_SERIALIZED (event)) {
@@ -1047,6 +1055,7 @@ gst_app_src_unlock (GstBaseSrc * bsrc)
 {
   GstAppSrc *appsrc = GST_APP_SRC_CAST (bsrc);
   GstAppSrcPrivate *priv = appsrc->priv;
+  gboolean reset_time;
 
   g_mutex_lock (&priv->mutex);
   GST_DEBUG_OBJECT (appsrc, "unlock start");
@@ -1617,6 +1626,20 @@ gst_app_src_create (GstBaseSrc * bsrc, guint64 offset, guint size,
     }
   }
 
+  if (priv->reset_pos) {
+    /* Seamless segment update */
+    GstClockTime reset_time = 0;
+    GST_DEBUG_OBJECT (appsrc,
+        "Reset position from start %" GST_TIME_FORMAT " pos %" GST_TIME_FORMAT,
+        GST_TIME_ARGS (bsrc->segment.start),
+        GST_TIME_ARGS (bsrc->segment.position));
+
+    gst_base_src_new_seamless_segment (bsrc,
+        reset_time, -1, reset_time);
+
+    priv->reset_pos = FALSE;
+  }
+
   while (TRUE) {
     /* Our lock may have been release to push events or caps, check out
      * state in case we are now flushing. */
@@ -3041,12 +3064,17 @@ gst_app_src_event (GstBaseSrc * src, GstEvent * event)
 {
   GstAppSrc *appsrc = GST_APP_SRC_CAST (src);
   GstAppSrcPrivate *priv = appsrc->priv;
+  gboolean reset_time;
 
   switch (GST_EVENT_TYPE (event)) {
     case GST_EVENT_FLUSH_STOP:
+      gst_event_parse_flush_stop (event, &reset_time);
       g_mutex_lock (&priv->mutex);
       priv->is_eos = FALSE;
+      if (reset_time)
+          priv->reset_pos = TRUE;
       g_mutex_unlock (&priv->mutex);
+      GST_DEBUG_OBJECT (appsrc, "Event flush_stop reset %u", priv->reset_pos);
       break;
     default:
       break;
