diff --git a/gst-libs/gst/app/gstappsrc.c b/gst-libs/gst/app/gstappsrc.c
index be94926..a9a73fb 100644
--- a/gst-libs/gst/app/gstappsrc.c
+++ b/gst-libs/gst/app/gstappsrc.c
@@ -180,6 +180,9 @@ struct _GstAppSrcPrivate
   GstClockTime last_in_running_time, last_out_running_time;
   /* Updated based on the above whenever they change */
   GstClockTime queued_time;
+  GstClockTime start_buffer_ts;
+  GstClockTime end_buffer_ts;
+  guint64 seek_start_position;
   guint64 offset;
   GstAppStreamType current_type;
 
@@ -815,6 +818,9 @@ gst_app_src_flush_queued (GstAppSrc * src, gboolean retain_last_caps)
   priv->queued_bytes = 0;
   priv->queued_buffers = 0;
   priv->queued_time = 0;
+  priv->start_buffer_ts = GST_CLOCK_TIME_NONE;
+  priv->end_buffer_ts = GST_CLOCK_TIME_NONE;
+  priv->seek_start_position = GST_CLOCK_TIME_NONE;
   priv->last_in_running_time = GST_CLOCK_TIME_NONE;
   priv->last_out_running_time = GST_CLOCK_TIME_NONE;
   priv->need_discont_upstream = FALSE;
@@ -1287,6 +1293,7 @@ gst_app_src_do_seek (GstBaseSrc * src, GstSegment * segment)
     GST_DEBUG_OBJECT (appsrc, "flushing queue");
     g_mutex_lock (&priv->mutex);
     gst_app_src_flush_queued (appsrc, TRUE);
+    priv->seek_start_position = segment->position;
     gst_segment_copy_into (segment, &priv->last_segment);
     gst_segment_copy_into (segment, &priv->current_segment);
     priv->pending_custom_segment = FALSE;
@@ -1673,6 +1680,7 @@ gst_app_src_create (GstBaseSrc * bsrc, guint64 offset, guint size,
 
     /* return data as long as we have some */
     if (!gst_queue_array_is_empty (priv->queue)) {
+      guint n_buffers = 0;
       GstMiniObject *obj = gst_queue_array_pop_head (priv->queue);
 
       if (GST_IS_CAPS (obj)) {
@@ -1707,12 +1715,14 @@ gst_app_src_create (GstBaseSrc * bsrc, guint64 offset, guint size,
           GST_BUFFER_FLAG_SET (buffer, GST_BUFFER_FLAG_DISCONT);
           priv->need_discont_downstream = FALSE;
         }
-
+        
         *buf = buffer;
+         n_buffers = 1;
       } else if (GST_IS_BUFFER_LIST (obj)) {
         GstBufferList *buffer_list;
 
         buffer_list = GST_BUFFER_LIST (obj);
+        n_buffers = gst_buffer_list_length (buffer_list);
 
         /* Mark the first buffer of the buffer list as DISCONT if we
          * previously dropped a buffer instead of outputting it */
@@ -1784,6 +1794,42 @@ gst_app_src_create (GstBaseSrc * bsrc, guint64 offset, guint size,
         g_assert_not_reached ();
       }
 
+      priv->queued_buffers -= n_buffers;
+
+      if (!gst_queue_array_is_empty(priv->queue)){
+         guint queue_len = gst_queue_array_get_length(priv->queue);
+         gpointer head = gst_queue_array_peek_head(priv->queue);
+         gpointer tail = gst_queue_array_peek_tail(priv->queue);
+         if (queue_len > 1){
+           if (!GST_IS_BUFFER(head)){
+                head = gst_queue_array_peek_nth(priv->queue, 1);
+           }
+           if (!GST_IS_BUFFER(tail)){
+              tail = gst_queue_array_peek_nth(priv->queue, queue_len - 2);
+           }
+         }
+
+      if (GST_IS_BUFFER(head) && GST_IS_BUFFER(tail)){
+         priv->start_buffer_ts = GST_BUFFER_PTS(head);
+         priv->end_buffer_ts = GST_BUFFER_PTS(tail);
+         GST_DEBUG_OBJECT(appsrc, "end buffer ts %"GST_TIME_FORMAT" start buffer ts %"GST_TIME_FORMAT" seek start ts %"GST_TIME_FORMAT, 
+             GST_TIME_ARGS(priv->end_buffer_ts), GST_TIME_ARGS(priv->start_buffer_ts), GST_TIME_ARGS(priv->seek_start_position));
+
+         if (priv->end_buffer_ts != GST_CLOCK_TIME_NONE && priv->start_buffer_ts != GST_CLOCK_TIME_NONE \
+             && priv->seek_start_position != GST_CLOCK_TIME_NONE) {
+           if (priv->end_buffer_ts <= priv->seek_start_position){
+             priv->queued_time = 0;
+           }else if (priv->end_buffer_ts >= priv->start_buffer_ts){
+             priv->queued_time = priv->end_buffer_ts - priv->start_buffer_ts;
+           }
+         }
+        }
+      }else {
+        priv->queued_time = 0;
+      }
+ GST_DEBUG_OBJECT(appsrc, "priv->queued_bytes %lld priv->queued_buffers %lld priv->queued_time(%lld) %"GST_TIME_FORMAT, 
+     priv->queued_bytes, priv->queued_buffers, priv->queued_time, GST_TIME_ARGS(priv->queued_time));
+
       gst_app_src_update_queued_pop (appsrc, obj, TRUE);
 
       /* signal that we removed an item */
@@ -2717,6 +2763,9 @@ gst_app_src_push_internal (GstAppSrc * appsrc, GstBuffer * buffer,
     if (!steal_ref)
       gst_buffer_list_ref (buflist);
     gst_queue_array_push_tail (priv->queue, buflist);
+    priv->queued_buffers += gst_buffer_list_length (buflist);
+    guint buffer_cnt = gst_buffer_list_length(buflist);
+    priv->end_buffer_ts = GST_BUFFER_PTS(gst_buffer_list_get(buflist, buffer_cnt - 1));
   } else {
     /* Mark the buffer as DISCONT if we previously dropped a buffer instead of
      * queueing it */
@@ -2724,6 +2773,8 @@ gst_app_src_push_internal (GstAppSrc * appsrc, GstBuffer * buffer,
       if (!steal_ref) {
         buffer = gst_buffer_copy (buffer);
         steal_ref = TRUE;
+        priv->queued_buffers += 1;
+        priv->end_buffer_ts = GST_BUFFER_PTS(buffer);
       } else {
         buffer = gst_buffer_make_writable (buffer);
       }
@@ -2740,6 +2791,28 @@ gst_app_src_push_internal (GstAppSrc * appsrc, GstBuffer * buffer,
   gst_app_src_update_queued_push (appsrc,
       buflist ? GST_MINI_OBJECT_CAST (buflist) : GST_MINI_OBJECT_CAST (buffer));
 
+  gpointer head;
+  head = gst_queue_array_peek_head(priv->queue);
+  if (!GST_IS_BUFFER (head)){
+    head = gst_queue_array_peek_nth(priv->queue, 1);
+  }
+
+  priv->start_buffer_ts = GST_BUFFER_PTS(head);
+  GST_DEBUG_OBJECT(appsrc, "end buffer ts %"GST_TIME_FORMAT" start buffer ts %"GST_TIME_FORMAT" seek start ts %"GST_TIME_FORMAT, 
+      GST_TIME_ARGS(priv->end_buffer_ts), GST_TIME_ARGS(priv->start_buffer_ts), GST_TIME_ARGS(priv->seek_start_position));
+
+  if (priv->end_buffer_ts != GST_CLOCK_TIME_NONE && priv->start_buffer_ts != GST_CLOCK_TIME_NONE \
+       &&  priv->seek_start_position != GST_CLOCK_TIME_NONE) {
+    if (priv->end_buffer_ts <= priv->seek_start_position){
+      priv->queued_time = 0;
+  }else if (priv->end_buffer_ts >= priv->start_buffer_ts){
+      priv->queued_time = priv->end_buffer_ts - priv->start_buffer_ts;
+    }
+  }
+
+  GST_DEBUG_OBJECT(appsrc, "priv->queued_bytes %lld priv->queued_buffers %lld priv->queued_time(%lld) %"GST_TIME_FORMAT, 
+      priv->queued_bytes, priv->queued_buffers, priv->queued_time, GST_TIME_ARGS(priv->queued_time));
+
   if ((priv->wait_status & STREAM_WAITING))
     g_cond_broadcast (&priv->cond);
 
