diff --git a/gst/typefind/gsttypefindfunctions.c b/gst/typefind/gsttypefindfunctions.c
index 1eefbaa..71ae934 100644
--- a/gst/typefind/gsttypefindfunctions.c
+++ b/gst/typefind/gsttypefindfunctions.c
@@ -1878,6 +1878,39 @@ ac3_type_find (GstTypeFind * tf, gpointer unused)
   }
 }
 
+/*** audio/x-ac4 ***/
+/* FIXME 0.11: should be audio/ac4, but isn't for backwards compatibility */
+static GstStaticCaps ac4_caps = GST_STATIC_CAPS ("audio/x-ac4");
+#define AC4_CAPS (gst_static_caps_get(&ac4_caps))
+
+static void
+ac4_type_find (GstTypeFind * tf, gpointer unused)
+{
+  DataScanCtx c = { 0, NULL, 0 };
+
+  /* Search for an ac4 frame; not necessarily right at the start, but give it
+   * a lower probability if not found right at the start. Check that the
+   * frame is followed by a second frame at the expected offset.
+   * We could also check the two ac4 CRCs, but we don't do that right now */
+  while (c.offset < 1024) {
+    if (G_UNLIKELY (!data_scan_ctx_ensure_data (tf, &c, 7)))
+      break;
+
+    if (c.data[0] == 0xAC && c.data[1] == 0x40 && c.data[2] == 0xFF && c.data[3] == 0xFF) {
+      guint len = c.data[4]*0x10000 + c.data[5]*0x100 + c.data[6];
+      //if(len<1024)
+      {
+           GST_LOG ("found ac4, frame len is %x", len);
+           GstTypeFindProbability prob;
+           prob = GST_TYPE_FIND_MAXIMUM;
+           gst_type_find_suggest (tf, prob, AC4_CAPS);
+           return;
+      }
+    }
+    data_scan_ctx_advance (tf, &c, 1);
+  }
+}
+
 /*** audio/x-dts ***/
 static GstStaticCaps dts_caps = GST_STATIC_CAPS ("audio/x-dts");
 #define DTS_CAPS (gst_static_caps_get (&dts_caps))
@@ -6184,3 +6217,5 @@ GST_TYPE_FIND_REGISTER_DEFINE (aa, "audio/audible", GST_RANK_MARGINAL,
     aa_type_find, "aa,aax", AA_CAPS, NULL, NULL);
 GST_TYPE_FIND_REGISTER_DEFINE (tap, "audio/x-tap-tap", GST_RANK_PRIMARY,
     tap_type_find, "tap", TAP_CAPS, NULL, NULL);
+GST_TYPE_FIND_REGISTER_DEFINE (ac4, "audio/x-ac4", GST_RANK_PRIMARY,
+    ac4_type_find, "ac4", AC4_CAPS, NULL, NULL);
